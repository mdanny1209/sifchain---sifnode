name: ebrelayer deployment automation

on:
  push:
    branches:
      - 'ebrelayer-pipeline-development'

jobs:
  deploy_swing_set_ebrelayer:
    name: deploy-ebrelayer-swingset
    runs-on: ${{ matrix.os }}
    env:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN_SWINGSET_US }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_region: "us-west-2"
      aws_cluster_name: "sifchain-aws-swing-set-us"
      aws_role: "arn:aws:iam::983740309645:role/OrganizationAccountAccessRole"
      VAULT_TEST_SETTINGS_PATH: "kv-v2/swing-set/ebrelayer-smoke-test"
      app_namespace: "ebrelayer"
      image: "sifchain/ebrelayer"
      image_tag: "testnet-genesis"
      env: "swing-set"
      app_name: "ebrelayer"
      app_env: "swing-set"

    strategy:
      matrix:
        os: [ 'ubuntu-18.04' ]
        ruby: [ 2.3 ]

    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Install Rake
        run: gem install rake

      - name: Sifchain Art
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          echo '                       iiii     ffffffffffffffff                 hhhhhhh                                 iiii'
          echo '                      i::::i   f::::::::::::::::f                h:::::h                                i::::i'
          echo '                       iiii   f::::::::::::::::::f               h:::::h                                 iiii'
          echo '                              f::::::fffffff:::::f               h:::::h'
          echo '        ssssssssss   iiiiiii  f:::::f       ffffffcccccccccccccccch::::h hhhhh         aaaaaaaaaaaaa   iiiiiiinnnn  nnnnnnnn'
          echo '      ss::::::::::s  i:::::i  f:::::f           cc:::::::::::::::ch::::hh:::::hhh      a::::::::::::a  i:::::in:::nn::::::::nn'
          echo '    ss:::::::::::::s  i::::i f:::::::ffffff    c:::::::::::::::::ch::::::::::::::hh    aaaaaaaaa:::::a  i::::in::::::::::::::nn'
          echo '    s::::::ssss:::::s i::::i f::::::::::::f   c:::::::cccccc:::::ch:::::::hhh::::::h            a::::a  i::::inn:::::::::::::::n'
          echo '     s:::::s  ssssss  i::::i f::::::::::::f   c::::::c     ccccccch::::::h   h::::::h    aaaaaaa:::::a  i::::i  n:::::nnnn:::::n'
          echo '       s::::::s       i::::i f:::::::ffffff   c:::::c             h:::::h     h:::::h  aa::::::::::::a  i::::i  n::::n    n::::n'
          echo '          s::::::s    i::::i  f:::::f         c:::::c             h:::::h     h:::::h a::::aaaa::::::a  i::::i  n::::n    n::::n'
          echo '    ssssss   s:::::s  i::::i  f:::::f         c::::::c     ccccccch:::::h     h:::::ha::::a    a:::::a  i::::i  n::::n    n::::n'
          echo '    s:::::ssss::::::si::::::if:::::::f        c:::::::cccccc:::::ch:::::h     h:::::ha::::a    a:::::a i::::::i n::::n    n::::n'
          echo '    s::::::::::::::s i::::::if:::::::f         c:::::::::::::::::ch:::::h     h:::::ha:::::aaaa::::::a i::::::i n::::n    n::::n'
          echo '     s:::::::::::ss  i::::::if:::::::f          cc:::::::::::::::ch:::::h     h:::::h a::::::::::aa:::ai::::::i n::::n    n::::n'
          echo '      sssssssssss    iiiiiiiifffffffff            cccccccccccccccchhhhhhh     hhhhhhh  aaaaaaaaaa  aaaaiiiiiiii nnnnnn    nnnnnn'


      - name: Setup AWS Profile and KUBECONFIG
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          echo "Configure AWSCLI Profile and Credentials from Git Secrets and Pull Temp Kubernetes Config File"
          rake "cluster:automation:configure_aws_kube_profile[${app_env}, ${AWS_ACCESS_KEY_ID}, ${AWS_SECRET_ACCESS_KEY}, ${aws_region}, ${aws_role}, ${aws_cluster_name}]"
          ls -lah
          echo "aws eks update-kubeconfig --name ${aws_cluster_name} --region ${aws_region} --profile ${app_env} --kubeconfig ./kubeconfig"
          cat ~/.aws/config
          kubectl get nodes --kubeconfig=./kubeconfig

      - name: Login to Vault on Swing-Set
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This will login to the vault for the specified environment in the kubeconfig."
          rake "cluster:vault:login[]"


      - name: Setup Vault Policy on Swing-Set
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This will create the vault app policy for the kubernetes appliation."
          rake "cluster:vault:createpolicy[${app_namespace}, ${image}, ${image_tag}, ${env}, ${app_name}]"


      - name: Enable Kubernetes Vault Communication If Not Enabled
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This will ensure enablement of kubernetes ability to talk to vault"
          rake "cluster:vault:enablekubernetes[]"


      - name: Configure Vault to Mount Secrets To Application
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This finishes configuring the application to talk to vault and assigns the policy to the deployment name and namespace name"
          rake "cluster:vault:configureapplication[${app_namespace}, ${image}, ${image_tag}, ${env}, ${app_name}]"


      - name: Anchore Image Scan
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This executes a anchore image scan on the specified docker image and app name, it will fail when the scan fails to pass. Prints report to window."
          rake "cluster:anchore:scan[${image}, ${image_tag}, ${app_name}]"


      - name: Deploy Ebrelayer to Kubernetes Via Helm.
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          echo "This deploys a helm application configured to utilize vault secrets."
          rake "cluster:vault:deploy[${app_namespace}, ${image}, ${image_tag}, ${env}, ${app_name}]"


      - name: Execute ebrelayer Integration Tests
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          export PATH=$(pwd):${PATH}
          export BASEDIR=$(pwd)
          echo "This will source the vaulte secrets as environment variables defined at the path and execute the tests accordingly."
          rake "cluster:vault:generate_vault_tmp_var_source_file[${VAULT_TEST_SETTINGS_PATH}]"
          source ./tmp_secrets
          #bash test/integration/environment_setup.sh
          echo "Skiping test until echo output that shows values is removed and I get the files needed to execute the test"


      - name: Clean Temp Files and Secrets
        shell: bash
        if: github.ref == 'refs/heads/ebrelayer-pipeline-development'
        run: |
          set +x
          echo "Clean up all temporary files that were generated"
          rm -rf ./kubeconfig
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          rm -rf ./tmp_secrewts
          rm -rf ./pyscript.py
