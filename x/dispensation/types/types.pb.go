// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/dispensation/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Distribution type enum
type DistributionType int32

const (
	// Unspecified distribution type
	DistributionType_DISTRIBUTION_TYPE_UNSPECIFIED DistributionType = 0
	// Airdrop distribution type
	DistributionType_DISTRIBUTION_TYPE_AIRDROP DistributionType = 1
)

var DistributionType_name = map[int32]string{
	0: "DISTRIBUTION_TYPE_UNSPECIFIED",
	1: "DISTRIBUTION_TYPE_AIRDROP",
}

var DistributionType_value = map[string]int32{
	"DISTRIBUTION_TYPE_UNSPECIFIED": 0,
	"DISTRIBUTION_TYPE_AIRDROP":     1,
}

func (x DistributionType) String() string {
	return proto.EnumName(DistributionType_name, int32(x))
}

func (DistributionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{0}
}

// Claim status enum
type ClaimStatus int32

const (
	// Pending claim status
	ClaimStatus_CLAIM_STATUS_PENDING ClaimStatus = 0
	// Completed claim status
	ClaimStatus_CLAIM_STATUS_COMPLETED ClaimStatus = 1
)

var ClaimStatus_name = map[int32]string{
	0: "CLAIM_STATUS_PENDING",
	1: "CLAIM_STATUS_COMPLETED",
}

var ClaimStatus_value = map[string]int32{
	"CLAIM_STATUS_PENDING":   0,
	"CLAIM_STATUS_COMPLETED": 1,
}

func (x ClaimStatus) String() string {
	return proto.EnumName(ClaimStatus_name, int32(x))
}

func (ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{1}
}

type GenesisState struct {
	AddressWhitelist []string `protobuf:"bytes,1,rep,name=address_whitelist,json=addressWhitelist,proto3" json:"address_whitelist,omitempty"`
	AdminAddress     string   `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAddressWhitelist() []string {
	if m != nil {
		return m.AddressWhitelist
	}
	return nil
}

func (m *GenesisState) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type DistributionRecord struct {
	ClaimStatus                 ClaimStatus                              `protobuf:"varint,1,opt,name=claim_status,json=claimStatus,proto3,enum=sifnode.dispensation.v1.ClaimStatus" json:"claim_status,omitempty"`
	DistributionName            string                                   `protobuf:"bytes,2,opt,name=distribution_name,json=distributionName,proto3" json:"distribution_name,omitempty"`
	RecipientAddress            string                                   `protobuf:"bytes,3,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Coins                       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"coins"`
	DistributionStartHeight     github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,5,opt,name=distribution_start_height,json=distributionStartHeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"distribution_start_height" yaml:"distribution_start_height"`
	DistributionCompletedHeight github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,6,opt,name=distribution_completed_height,json=distributionCompletedHeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"distribution_completed_height" yaml:"distribution_completed_height"`
}

func (m *DistributionRecord) Reset()         { *m = DistributionRecord{} }
func (m *DistributionRecord) String() string { return proto.CompactTextString(m) }
func (*DistributionRecord) ProtoMessage()    {}
func (*DistributionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{1}
}
func (m *DistributionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionRecord.Merge(m, src)
}
func (m *DistributionRecord) XXX_Size() int {
	return m.Size()
}
func (m *DistributionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionRecord proto.InternalMessageInfo

func (m *DistributionRecord) GetClaimStatus() ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return ClaimStatus_CLAIM_STATUS_PENDING
}

func (m *DistributionRecord) GetDistributionName() string {
	if m != nil {
		return m.DistributionName
	}
	return ""
}

func (m *DistributionRecord) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *DistributionRecord) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type DistributionRecords struct {
	DistributionRecords []*DistributionRecord `protobuf:"bytes,1,rep,name=distribution_records,json=distributionRecords,proto3" json:"distribution_records,omitempty"`
}

func (m *DistributionRecords) Reset()         { *m = DistributionRecords{} }
func (m *DistributionRecords) String() string { return proto.CompactTextString(m) }
func (*DistributionRecords) ProtoMessage()    {}
func (*DistributionRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{2}
}
func (m *DistributionRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionRecords.Merge(m, src)
}
func (m *DistributionRecords) XXX_Size() int {
	return m.Size()
}
func (m *DistributionRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionRecords.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionRecords proto.InternalMessageInfo

func (m *DistributionRecords) GetDistributionRecords() []*DistributionRecord {
	if m != nil {
		return m.DistributionRecords
	}
	return nil
}

type DistributionRecordsResponse struct {
	DistributionRecords *DistributionRecords                   `protobuf:"bytes,1,opt,name=distribution_records,json=distributionRecords,proto3" json:"distribution_records,omitempty"`
	Height              github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=height,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"height" yaml:"height"`
}

func (m *DistributionRecordsResponse) Reset()         { *m = DistributionRecordsResponse{} }
func (m *DistributionRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*DistributionRecordsResponse) ProtoMessage()    {}
func (*DistributionRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{3}
}
func (m *DistributionRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionRecordsResponse.Merge(m, src)
}
func (m *DistributionRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DistributionRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionRecordsResponse proto.InternalMessageInfo

func (m *DistributionRecordsResponse) GetDistributionRecords() *DistributionRecords {
	if m != nil {
		return m.DistributionRecords
	}
	return nil
}

type Distributions struct {
	Distributions []*Distribution `protobuf:"bytes,1,rep,name=distributions,proto3" json:"distributions,omitempty"`
}

func (m *Distributions) Reset()         { *m = Distributions{} }
func (m *Distributions) String() string { return proto.CompactTextString(m) }
func (*Distributions) ProtoMessage()    {}
func (*Distributions) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{4}
}
func (m *Distributions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distributions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distributions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distributions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distributions.Merge(m, src)
}
func (m *Distributions) XXX_Size() int {
	return m.Size()
}
func (m *Distributions) XXX_DiscardUnknown() {
	xxx_messageInfo_Distributions.DiscardUnknown(m)
}

var xxx_messageInfo_Distributions proto.InternalMessageInfo

func (m *Distributions) GetDistributions() []*Distribution {
	if m != nil {
		return m.Distributions
	}
	return nil
}

type Distribution struct {
	DistributionType DistributionType `protobuf:"varint,1,opt,name=distribution_type,json=distributionType,proto3,enum=sifnode.dispensation.v1.DistributionType" json:"distribution_type,omitempty"`
	DistributionName string           `protobuf:"bytes,2,opt,name=distribution_name,json=distributionName,proto3" json:"distribution_name,omitempty"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfdf912039cd8799, []int{5}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

func (m *Distribution) GetDistributionType() DistributionType {
	if m != nil {
		return m.DistributionType
	}
	return DistributionType_DISTRIBUTION_TYPE_UNSPECIFIED
}

func (m *Distribution) GetDistributionName() string {
	if m != nil {
		return m.DistributionName
	}
	return ""
}

func init() {
	proto.RegisterEnum("sifnode.dispensation.v1.DistributionType", DistributionType_name, DistributionType_value)
	proto.RegisterEnum("sifnode.dispensation.v1.ClaimStatus", ClaimStatus_name, ClaimStatus_value)
	proto.RegisterType((*GenesisState)(nil), "sifnode.dispensation.v1.GenesisState")
	proto.RegisterType((*DistributionRecord)(nil), "sifnode.dispensation.v1.DistributionRecord")
	proto.RegisterType((*DistributionRecords)(nil), "sifnode.dispensation.v1.DistributionRecords")
	proto.RegisterType((*DistributionRecordsResponse)(nil), "sifnode.dispensation.v1.DistributionRecordsResponse")
	proto.RegisterType((*Distributions)(nil), "sifnode.dispensation.v1.Distributions")
	proto.RegisterType((*Distribution)(nil), "sifnode.dispensation.v1.Distribution")
}

func init() {
	proto.RegisterFile("sifnode/dispensation/v1/types.proto", fileDescriptor_bfdf912039cd8799)
}

var fileDescriptor_bfdf912039cd8799 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0xf2, 0x91, 0x30, 0x6d, 0x4d, 0x1d, 0x08, 0x14, 0x08, 0x6d, 0x5d, 0xd0, 0x54,
	0xd0, 0x5d, 0x5b, 0xef, 0xbc, 0xd1, 0x7e, 0x89, 0xab, 0x50, 0x9a, 0xdd, 0x05, 0xa2, 0x31, 0xae,
	0xdb, 0xdd, 0xa1, 0x9d, 0xd8, 0xdd, 0xa9, 0x9d, 0x29, 0xca, 0x4b, 0x18, 0x13, 0xef, 0x7c, 0x04,
	0x9f, 0x84, 0x4b, 0xee, 0x24, 0x5e, 0x54, 0x03, 0x6f, 0xc0, 0x13, 0x98, 0xfd, 0x28, 0x6e, 0x29,
	0x4d, 0xe8, 0x55, 0xbb, 0xe7, 0x7f, 0xe6, 0x7f, 0x7e, 0x73, 0x66, 0xf6, 0x2c, 0x5c, 0x65, 0xe4,
	0xc0, 0xa1, 0x16, 0x96, 0x2c, 0xc2, 0xda, 0xd8, 0x61, 0x06, 0x27, 0xd4, 0x91, 0x0e, 0x73, 0x12,
	0x3f, 0x6a, 0x63, 0x26, 0xb6, 0x3b, 0x94, 0x53, 0xb4, 0x10, 0x24, 0x89, 0xe1, 0x24, 0xf1, 0x30,
	0xb7, 0x34, 0xd7, 0xa0, 0x0d, 0xea, 0xe5, 0x48, 0xee, 0x3f, 0x3f, 0x7d, 0x69, 0xde, 0xa4, 0xcc,
	0xa6, 0x4c, 0xaa, 0x1b, 0x0c, 0x4b, 0x26, 0x25, 0x8e, 0x1f, 0x17, 0x3e, 0xc0, 0xd8, 0x26, 0x76,
	0x30, 0x23, 0x4c, 0xe5, 0x06, 0xc7, 0x68, 0x03, 0xde, 0x31, 0x2c, 0xab, 0x83, 0x19, 0xd3, 0x3f,
	0x37, 0x09, 0xc7, 0x2d, 0xc2, 0x78, 0x12, 0x64, 0x26, 0xb2, 0x33, 0x4a, 0x22, 0x10, 0xf6, 0xfb,
	0x71, 0xb4, 0x0a, 0xe3, 0x86, 0x65, 0x13, 0x47, 0x0f, 0x94, 0xe4, 0xad, 0x0c, 0xc8, 0xce, 0x28,
	0x31, 0x2f, 0x58, 0xf0, 0x63, 0xc2, 0xe9, 0x24, 0x44, 0x65, 0xc2, 0x78, 0x87, 0xd4, 0xbb, 0x2e,
	0xa3, 0x82, 0x4d, 0xda, 0xb1, 0xd0, 0x26, 0x8c, 0x99, 0x2d, 0x83, 0xd8, 0x3a, 0xe3, 0x06, 0xef,
	0xb2, 0x24, 0xc8, 0x80, 0xec, 0xed, 0xfc, 0x9a, 0x38, 0x62, 0x5b, 0x62, 0xc9, 0x4d, 0x56, 0xbd,
	0x5c, 0x25, 0x6a, 0xfe, 0x7f, 0x70, 0x89, 0xad, 0x90, 0xbd, 0xee, 0x18, 0x36, 0x0e, 0x40, 0x12,
	0x61, 0xa1, 0x6a, 0xd8, 0xde, 0xf6, 0x3a, 0xd8, 0x24, 0x6d, 0x82, 0x1d, 0x7e, 0x49, 0x3d, 0xe1,
	0x27, 0x5f, 0x0a, 0x01, 0x39, 0xfa, 0x04, 0xa7, 0xdc, 0x4e, 0xb1, 0xe4, 0x64, 0x66, 0x22, 0x1b,
	0xcd, 0x2f, 0x8a, 0x7e, 0x0f, 0x45, 0xb7, 0x87, 0xe2, 0x61, 0xae, 0x8e, 0xb9, 0x91, 0x13, 0x4b,
	0x94, 0x38, 0xc5, 0xe7, 0xc7, 0xbd, 0x74, 0xe4, 0xa2, 0x97, 0x8e, 0x1d, 0x19, 0x76, 0xeb, 0xa9,
	0xe0, 0xad, 0x12, 0x7e, 0xfe, 0x49, 0x67, 0x1b, 0x84, 0x37, 0xbb, 0x75, 0xd1, 0xa4, 0xb6, 0x14,
	0x1c, 0x80, 0xff, 0xf3, 0x88, 0x59, 0x1f, 0x83, 0xe3, 0x74, 0x0d, 0x98, 0xe2, 0x57, 0x42, 0x5f,
	0x01, 0x5c, 0x1c, 0xd8, 0x0d, 0xe3, 0x46, 0x87, 0xeb, 0x4d, 0x4c, 0x1a, 0x4d, 0x9e, 0x9c, 0x72,
	0x41, 0x8b, 0x8a, 0x5b, 0xec, 0x77, 0x2f, 0x7d, 0xff, 0x06, 0xe6, 0xb2, 0xc3, 0x2f, 0x7a, 0xe9,
	0x8c, 0x8f, 0x35, 0xd2, 0x58, 0x50, 0x16, 0xc2, 0x9a, 0xea, 0x4a, 0x2f, 0x3d, 0x05, 0xfd, 0x00,
	0x70, 0x65, 0x60, 0x9d, 0x49, 0xed, 0x76, 0x0b, 0x73, 0x6c, 0xf5, 0xa1, 0xa6, 0x3d, 0xa8, 0xbd,
	0xb1, 0xa1, 0xd6, 0xae, 0x81, 0xba, 0x6a, 0x2e, 0x28, 0xcb, 0x61, 0xbd, 0xd4, 0x97, 0x7d, 0x38,
	0xa1, 0x0b, 0x67, 0x87, 0x6f, 0x16, 0x43, 0xef, 0xe1, 0xdc, 0x80, 0x6b, 0xc7, 0x8f, 0x7b, 0xd7,
	0x38, 0x9a, 0xdf, 0x18, 0x79, 0xc5, 0x86, 0xbd, 0x94, 0x59, 0x6b, 0xd8, 0x5f, 0xf8, 0x05, 0xe0,
	0xf2, 0x35, 0x75, 0x15, 0xcc, 0xda, 0xd4, 0x61, 0x18, 0xe9, 0x23, 0xeb, 0x83, 0x6c, 0x34, 0xff,
	0x70, 0x8c, 0xfa, 0xec, 0x5a, 0x00, 0xb4, 0x0f, 0xa7, 0x83, 0xe6, 0x7b, 0xf7, 0xbc, 0xf8, 0x6c,
	0xec, 0xe6, 0xc7, 0xfd, 0xe6, 0xf7, 0xbb, 0x1c, 0xd8, 0x09, 0xef, 0x60, 0x3c, 0x0c, 0xc1, 0xd0,
	0x6b, 0x18, 0x0f, 0x03, 0xf4, 0x7b, 0x78, 0xef, 0x66, 0x7b, 0x18, 0x5c, 0x2b, 0x7c, 0x07, 0x30,
	0x16, 0xd6, 0xd1, 0xde, 0x95, 0x57, 0xd7, 0x25, 0x0c, 0x06, 0xc1, 0x83, 0x1b, 0x55, 0xd0, 0x8e,
	0xda, 0x78, 0xf0, 0x2d, 0x77, 0x23, 0x63, 0x8d, 0x84, 0x75, 0x0d, 0x26, 0xae, 0x5a, 0xa2, 0xbb,
	0x70, 0xa5, 0x2c, 0xab, 0x9a, 0x22, 0x17, 0x77, 0x35, 0x79, 0xa7, 0xaa, 0x6b, 0x6f, 0x6a, 0x15,
	0x7d, 0xb7, 0xaa, 0xd6, 0x2a, 0x25, 0xf9, 0x85, 0x5c, 0x29, 0x27, 0x22, 0x68, 0x05, 0x2e, 0x0e,
	0xa7, 0x14, 0x64, 0xa5, 0xac, 0xec, 0xd4, 0x12, 0x60, 0xbd, 0x04, 0xa3, 0xa1, 0x89, 0x85, 0x92,
	0x70, 0xae, 0xb4, 0x55, 0x90, 0xb7, 0x75, 0x55, 0x2b, 0x68, 0xbb, 0xaa, 0x5e, 0xab, 0x54, 0xcb,
	0x72, 0x75, 0x33, 0x11, 0x41, 0x4b, 0x70, 0x7e, 0x40, 0x29, 0xed, 0x6c, 0xd7, 0xb6, 0x2a, 0x5a,
	0xa5, 0x9c, 0x00, 0xc5, 0x57, 0xc7, 0x67, 0x29, 0x70, 0x72, 0x96, 0x02, 0x7f, 0xcf, 0x52, 0xe0,
	0xdb, 0x79, 0x2a, 0x72, 0x72, 0x9e, 0x8a, 0x9c, 0x9e, 0xa7, 0x22, 0x6f, 0x1f, 0x87, 0x4e, 0x5a,
	0x25, 0x07, 0x66, 0xd3, 0x20, 0x8e, 0xd4, 0xff, 0x6c, 0x7c, 0x19, 0xfc, 0x70, 0x78, 0xe7, 0x5e,
	0x9f, 0xf6, 0xe6, 0xfd, 0x93, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0x44, 0x61, 0xf3, 0x5d,
	0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressWhitelist) > 0 {
		for iNdEx := len(m.AddressWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddressWhitelist[iNdEx])
			copy(dAtA[i:], m.AddressWhitelist[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddressWhitelist[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DistributionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DistributionCompletedHeight.Size()
		i -= size
		if _, err := m.DistributionCompletedHeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DistributionStartHeight.Size()
		i -= size
		if _, err := m.DistributionStartHeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DistributionName) > 0 {
		i -= len(m.DistributionName)
		copy(dAtA[i:], m.DistributionName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DistributionName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClaimStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DistributionRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionRecords) > 0 {
		for iNdEx := len(m.DistributionRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DistributionRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Height.Size()
		i -= size
		if _, err := m.Height.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.DistributionRecords != nil {
		{
			size, err := m.DistributionRecords.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Distributions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distributions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distributions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionName) > 0 {
		i -= len(m.DistributionName)
		copy(dAtA[i:], m.DistributionName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DistributionName)))
		i--
		dAtA[i] = 0x12
	}
	if m.DistributionType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DistributionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressWhitelist) > 0 {
		for _, s := range m.AddressWhitelist {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DistributionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimStatus != 0 {
		n += 1 + sovTypes(uint64(m.ClaimStatus))
	}
	l = len(m.DistributionName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.DistributionStartHeight.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DistributionCompletedHeight.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *DistributionRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DistributionRecords) > 0 {
		for _, e := range m.DistributionRecords {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DistributionRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionRecords != nil {
		l = m.DistributionRecords.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Height.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Distributions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionType != 0 {
		n += 1 + sovTypes(uint64(m.DistributionType))
	}
	l = len(m.DistributionName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressWhitelist = append(m.AddressWhitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionStartHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionCompletedHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionCompletedHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionRecords = append(m.DistributionRecords, &DistributionRecord{})
			if err := m.DistributionRecords[len(m.DistributionRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionRecords == nil {
				m.DistributionRecords = &DistributionRecords{}
			}
			if err := m.DistributionRecords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distributions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distributions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distributions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, &Distribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionType", wireType)
			}
			m.DistributionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionType |= DistributionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
