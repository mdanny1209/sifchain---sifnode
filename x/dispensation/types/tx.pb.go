// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/dispensation/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateDistribution struct {
	Distributor      string                                             `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor,omitempty"`
	AuthorizedRunner string                                             `protobuf:"bytes,2,opt,name=authorized_runner,json=authorizedRunner,proto3" json:"authorized_runner,omitempty"`
	DistributionType DistributionType                                   `protobuf:"varint,3,opt,name=distribution_type,json=distributionType,proto3,enum=sifnode.dispensation.v1.DistributionType" json:"distribution_type,omitempty"`
	Output           []github_com_cosmos_cosmos_sdk_x_bank_types.Output `protobuf:"bytes,4,rep,name=output,proto3,customtype=github.com/cosmos/cosmos-sdk/x/bank/types.Output" json:"output,omitempty"`
}

func (m *MsgCreateDistribution) Reset()         { *m = MsgCreateDistribution{} }
func (m *MsgCreateDistribution) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDistribution) ProtoMessage()    {}
func (*MsgCreateDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{0}
}
func (m *MsgCreateDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDistribution.Merge(m, src)
}
func (m *MsgCreateDistribution) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDistribution proto.InternalMessageInfo

func (m *MsgCreateDistribution) GetDistributor() string {
	if m != nil {
		return m.Distributor
	}
	return ""
}

func (m *MsgCreateDistribution) GetAuthorizedRunner() string {
	if m != nil {
		return m.AuthorizedRunner
	}
	return ""
}

func (m *MsgCreateDistribution) GetDistributionType() DistributionType {
	if m != nil {
		return m.DistributionType
	}
	return DistributionType_DISTRIBUTION_TYPE_UNSPECIFIED
}

type MsgCreateDistributionResponse struct {
}

func (m *MsgCreateDistributionResponse) Reset()         { *m = MsgCreateDistributionResponse{} }
func (m *MsgCreateDistributionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDistributionResponse) ProtoMessage()    {}
func (*MsgCreateDistributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{1}
}
func (m *MsgCreateDistributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDistributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDistributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDistributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDistributionResponse.Merge(m, src)
}
func (m *MsgCreateDistributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDistributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDistributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDistributionResponse proto.InternalMessageInfo

type MsgCreateClaimResponse struct {
}

func (m *MsgCreateClaimResponse) Reset()         { *m = MsgCreateClaimResponse{} }
func (m *MsgCreateClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateClaimResponse) ProtoMessage()    {}
func (*MsgCreateClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{2}
}
func (m *MsgCreateClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateClaimResponse.Merge(m, src)
}
func (m *MsgCreateClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateClaimResponse proto.InternalMessageInfo

type MsgRunDistributionResponse struct {
}

func (m *MsgRunDistributionResponse) Reset()         { *m = MsgRunDistributionResponse{} }
func (m *MsgRunDistributionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRunDistributionResponse) ProtoMessage()    {}
func (*MsgRunDistributionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{3}
}
func (m *MsgRunDistributionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunDistributionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunDistributionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunDistributionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunDistributionResponse.Merge(m, src)
}
func (m *MsgRunDistributionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunDistributionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunDistributionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunDistributionResponse proto.InternalMessageInfo

type MsgCreateUserClaim struct {
	UserClaimAddress string           `protobuf:"bytes,1,opt,name=user_claim_address,json=userClaimAddress,proto3" json:"user_claim_address,omitempty"`
	UserClaimType    DistributionType `protobuf:"varint,2,opt,name=user_claim_type,json=userClaimType,proto3,enum=sifnode.dispensation.v1.DistributionType" json:"user_claim_type,omitempty"`
}

func (m *MsgCreateUserClaim) Reset()         { *m = MsgCreateUserClaim{} }
func (m *MsgCreateUserClaim) String() string { return proto.CompactTextString(m) }
func (*MsgCreateUserClaim) ProtoMessage()    {}
func (*MsgCreateUserClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{4}
}
func (m *MsgCreateUserClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateUserClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateUserClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateUserClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateUserClaim.Merge(m, src)
}
func (m *MsgCreateUserClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateUserClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateUserClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateUserClaim proto.InternalMessageInfo

func (m *MsgCreateUserClaim) GetUserClaimAddress() string {
	if m != nil {
		return m.UserClaimAddress
	}
	return ""
}

func (m *MsgCreateUserClaim) GetUserClaimType() DistributionType {
	if m != nil {
		return m.UserClaimType
	}
	return DistributionType_DISTRIBUTION_TYPE_UNSPECIFIED
}

type MsgRunDistribution struct {
	AuthorizedRunner string           `protobuf:"bytes,1,opt,name=authorized_runner,json=authorizedRunner,proto3" json:"authorized_runner,omitempty"`
	DistributionName string           `protobuf:"bytes,2,opt,name=distribution_name,json=distributionName,proto3" json:"distribution_name,omitempty"`
	DistributionType DistributionType `protobuf:"varint,3,opt,name=distribution_type,json=distributionType,proto3,enum=sifnode.dispensation.v1.DistributionType" json:"distribution_type,omitempty"`
}

func (m *MsgRunDistribution) Reset()         { *m = MsgRunDistribution{} }
func (m *MsgRunDistribution) String() string { return proto.CompactTextString(m) }
func (*MsgRunDistribution) ProtoMessage()    {}
func (*MsgRunDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb59f4566305e810, []int{5}
}
func (m *MsgRunDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunDistribution.Merge(m, src)
}
func (m *MsgRunDistribution) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunDistribution proto.InternalMessageInfo

func (m *MsgRunDistribution) GetAuthorizedRunner() string {
	if m != nil {
		return m.AuthorizedRunner
	}
	return ""
}

func (m *MsgRunDistribution) GetDistributionName() string {
	if m != nil {
		return m.DistributionName
	}
	return ""
}

func (m *MsgRunDistribution) GetDistributionType() DistributionType {
	if m != nil {
		return m.DistributionType
	}
	return DistributionType_DISTRIBUTION_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*MsgCreateDistribution)(nil), "sifnode.dispensation.v1.MsgCreateDistribution")
	proto.RegisterType((*MsgCreateDistributionResponse)(nil), "sifnode.dispensation.v1.MsgCreateDistributionResponse")
	proto.RegisterType((*MsgCreateClaimResponse)(nil), "sifnode.dispensation.v1.MsgCreateClaimResponse")
	proto.RegisterType((*MsgRunDistributionResponse)(nil), "sifnode.dispensation.v1.MsgRunDistributionResponse")
	proto.RegisterType((*MsgCreateUserClaim)(nil), "sifnode.dispensation.v1.MsgCreateUserClaim")
	proto.RegisterType((*MsgRunDistribution)(nil), "sifnode.dispensation.v1.MsgRunDistribution")
}

func init() { proto.RegisterFile("sifnode/dispensation/v1/tx.proto", fileDescriptor_eb59f4566305e810) }

var fileDescriptor_eb59f4566305e810 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x16, 0x4d, 0x9a, 0x11, 0xb4, 0xb3, 0xf8, 0x51, 0x45, 0x90, 0x45, 0xe5, 0x52,
	0x54, 0x48, 0xd8, 0x86, 0xb8, 0xb3, 0x71, 0x42, 0x14, 0x44, 0xf8, 0x71, 0xe0, 0x52, 0xb9, 0xb5,
	0x97, 0x5a, 0x23, 0x76, 0xe4, 0x67, 0x4f, 0x1d, 0xe2, 0x4f, 0xe0, 0xc0, 0x85, 0x7f, 0x09, 0x71,
	0xdc, 0x11, 0x71, 0x40, 0xa8, 0x3d, 0xf1, 0x5f, 0xa0, 0xa4, 0x49, 0xc8, 0x42, 0xca, 0xd4, 0xc3,
	0x4e, 0x89, 0x9f, 0x3f, 0xef, 0x9b, 0x97, 0xf7, 0x7d, 0x36, 0x72, 0x81, 0x1f, 0x0a, 0x49, 0x99,
	0x4f, 0x39, 0xc4, 0x4c, 0x00, 0xd1, 0x5c, 0x0a, 0xff, 0x78, 0xc7, 0xd7, 0x33, 0x2f, 0x56, 0x52,
	0x4b, 0x7c, 0x33, 0x23, 0xbc, 0x32, 0xe1, 0x1d, 0xef, 0xd8, 0xd7, 0x42, 0x19, 0xca, 0x94, 0xf1,
	0x93, 0xb7, 0x25, 0x6e, 0xdf, 0x59, 0x29, 0x78, 0x12, 0x33, 0x58, 0x42, 0xbd, 0x4f, 0x4d, 0x74,
	0x7d, 0x08, 0xe1, 0x81, 0x62, 0x44, 0xb3, 0x27, 0x1c, 0xb4, 0xe2, 0x63, 0x93, 0x80, 0xd8, 0x45,
	0x97, 0x69, 0xbe, 0x96, 0xaa, 0x6b, 0xb9, 0x56, 0x7f, 0x33, 0x28, 0x87, 0xf0, 0x00, 0x6d, 0x11,
	0xa3, 0xa7, 0x52, 0xf1, 0x0f, 0x8c, 0x8e, 0x94, 0x11, 0x82, 0xa9, 0x6e, 0x33, 0xe5, 0x3a, 0x7f,
	0x37, 0x82, 0x34, 0x8e, 0xdf, 0xa2, 0x2d, 0x5a, 0x92, 0x1f, 0x25, 0x45, 0x74, 0x5b, 0xae, 0xd5,
	0xbf, 0xba, 0x7b, 0xd7, 0x5b, 0xf1, 0x63, 0x5e, 0xb9, 0xa0, 0xd7, 0x27, 0x31, 0x0b, 0x3a, 0xb4,
	0x12, 0xc1, 0xcf, 0xd0, 0x86, 0x34, 0x3a, 0x36, 0xba, 0x7b, 0xc9, 0x6d, 0xf5, 0x37, 0xf7, 0x1f,
	0xfe, 0xf8, 0xb9, 0xfd, 0x20, 0xe4, 0x7a, 0x6a, 0xc6, 0xde, 0x44, 0x46, 0xfe, 0x44, 0x42, 0x24,
	0x21, 0x7b, 0xdc, 0x07, 0x7a, 0xe4, 0xcf, 0xfc, 0x31, 0x11, 0x47, 0x59, 0x17, 0x5e, 0xa4, 0xb9,
	0x41, 0xa6, 0xd1, 0xdb, 0x46, 0xb7, 0x6b, 0xbb, 0x11, 0x30, 0x88, 0xa5, 0x00, 0xd6, 0xeb, 0xa2,
	0x1b, 0x05, 0x70, 0xf0, 0x9e, 0xf0, 0xa8, 0xd8, 0xb9, 0x85, 0xec, 0x21, 0x84, 0x81, 0x11, 0xb5,
	0x79, 0x5f, 0x2c, 0x84, 0x8b, 0xc4, 0x37, 0xc0, 0x54, 0x9a, 0x8c, 0xef, 0x21, 0x6c, 0x80, 0xa9,
	0xd1, 0x24, 0x59, 0x8d, 0x08, 0xa5, 0x8a, 0x01, 0x64, 0xbd, 0xee, 0x98, 0x1c, 0x7b, 0xbc, 0x8c,
	0xe3, 0x97, 0xa8, 0x5d, 0xa2, 0xd3, 0x0e, 0x36, 0xd7, 0xed, 0xe0, 0x95, 0x42, 0x35, 0x59, 0xf6,
	0xbe, 0x2e, 0xeb, 0xaa, 0x94, 0x5d, 0x6f, 0xad, 0xb5, 0xc2, 0xda, 0x41, 0xc5, 0x5a, 0x41, 0x22,
	0x96, 0xcf, 0x41, 0x79, 0xe3, 0x39, 0x89, 0xd8, 0x45, 0xcd, 0xc1, 0xee, 0xef, 0x26, 0x6a, 0x0d,
	0x21, 0xc4, 0x1f, 0x11, 0xae, 0x19, 0x66, 0x6f, 0xa5, 0x74, 0xad, 0xdd, 0xf6, 0xa3, 0xf5, 0xf8,
	0xdc, 0x66, 0x2c, 0x51, 0xbb, 0x6a, 0xf1, 0xe0, 0x7c, 0xa9, 0x02, 0xb6, 0xfd, 0xf3, 0xe1, 0x33,
	0x53, 0x87, 0x01, 0xb5, 0xff, 0xf1, 0xee, 0x7f, 0x1a, 0x15, 0xd8, 0xde, 0x5b, 0x03, 0xce, 0x3f,
	0xba, 0xff, 0xf4, 0xdb, 0xdc, 0xb1, 0x4e, 0xe7, 0x8e, 0xf5, 0x6b, 0xee, 0x58, 0x9f, 0x17, 0x4e,
	0xe3, 0x74, 0xe1, 0x34, 0xbe, 0x2f, 0x9c, 0xc6, 0xbb, 0xf2, 0xc9, 0x7b, 0xc5, 0x0f, 0x27, 0x53,
	0xc2, 0x85, 0x9f, 0xdf, 0x43, 0xb3, 0xb3, 0x37, 0x51, 0x7a, 0x00, 0xc7, 0x1b, 0xe9, 0x3d, 0xb4,
	0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xa4, 0x09, 0x5d, 0xff, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateDistribution(ctx context.Context, in *MsgCreateDistribution, opts ...grpc.CallOption) (*MsgCreateDistributionResponse, error)
	CreateUserClaim(ctx context.Context, in *MsgCreateUserClaim, opts ...grpc.CallOption) (*MsgCreateClaimResponse, error)
	RunDistribution(ctx context.Context, in *MsgRunDistribution, opts ...grpc.CallOption) (*MsgRunDistributionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDistribution(ctx context.Context, in *MsgCreateDistribution, opts ...grpc.CallOption) (*MsgCreateDistributionResponse, error) {
	out := new(MsgCreateDistributionResponse)
	err := c.cc.Invoke(ctx, "/sifnode.dispensation.v1.Msg/CreateDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserClaim(ctx context.Context, in *MsgCreateUserClaim, opts ...grpc.CallOption) (*MsgCreateClaimResponse, error) {
	out := new(MsgCreateClaimResponse)
	err := c.cc.Invoke(ctx, "/sifnode.dispensation.v1.Msg/CreateUserClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RunDistribution(ctx context.Context, in *MsgRunDistribution, opts ...grpc.CallOption) (*MsgRunDistributionResponse, error) {
	out := new(MsgRunDistributionResponse)
	err := c.cc.Invoke(ctx, "/sifnode.dispensation.v1.Msg/RunDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateDistribution(context.Context, *MsgCreateDistribution) (*MsgCreateDistributionResponse, error)
	CreateUserClaim(context.Context, *MsgCreateUserClaim) (*MsgCreateClaimResponse, error)
	RunDistribution(context.Context, *MsgRunDistribution) (*MsgRunDistributionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDistribution(ctx context.Context, req *MsgCreateDistribution) (*MsgCreateDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistribution not implemented")
}
func (*UnimplementedMsgServer) CreateUserClaim(ctx context.Context, req *MsgCreateUserClaim) (*MsgCreateClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserClaim not implemented")
}
func (*UnimplementedMsgServer) RunDistribution(ctx context.Context, req *MsgRunDistribution) (*MsgRunDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDistribution not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDistribution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.dispensation.v1.Msg/CreateDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDistribution(ctx, req.(*MsgCreateDistribution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.dispensation.v1.Msg/CreateUserClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserClaim(ctx, req.(*MsgCreateUserClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RunDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRunDistribution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RunDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.dispensation.v1.Msg/RunDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RunDistribution(ctx, req.(*MsgRunDistribution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.dispensation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDistribution",
			Handler:    _Msg_CreateDistribution_Handler,
		},
		{
			MethodName: "CreateUserClaim",
			Handler:    _Msg_CreateUserClaim_Handler,
		},
		{
			MethodName: "RunDistribution",
			Handler:    _Msg_RunDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/dispensation/v1/tx.proto",
}

func (m *MsgCreateDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		for iNdEx := len(m.Output) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Output[iNdEx].Size()
				i -= size
				if _, err := m.Output[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DistributionType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DistributionType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuthorizedRunner) > 0 {
		i -= len(m.AuthorizedRunner)
		copy(dAtA[i:], m.AuthorizedRunner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuthorizedRunner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Distributor) > 0 {
		i -= len(m.Distributor)
		copy(dAtA[i:], m.Distributor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Distributor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDistributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDistributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDistributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRunDistributionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunDistributionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunDistributionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateUserClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateUserClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateUserClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserClaimType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UserClaimType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserClaimAddress) > 0 {
		i -= len(m.UserClaimAddress)
		copy(dAtA[i:], m.UserClaimAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserClaimAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRunDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributionType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DistributionType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DistributionName) > 0 {
		i -= len(m.DistributionName)
		copy(dAtA[i:], m.DistributionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DistributionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthorizedRunner) > 0 {
		i -= len(m.AuthorizedRunner)
		copy(dAtA[i:], m.AuthorizedRunner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuthorizedRunner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Distributor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AuthorizedRunner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionType != 0 {
		n += 1 + sovTx(uint64(m.DistributionType))
	}
	if len(m.Output) > 0 {
		for _, e := range m.Output {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateDistributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRunDistributionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateUserClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserClaimAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UserClaimType != 0 {
		n += 1 + sovTx(uint64(m.UserClaimType))
	}
	return n
}

func (m *MsgRunDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthorizedRunner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DistributionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionType != 0 {
		n += 1 + sovTx(uint64(m.DistributionType))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedRunner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedRunner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionType", wireType)
			}
			m.DistributionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionType |= DistributionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_x_bank_types.Output
			m.Output = append(m.Output, v)
			if err := m.Output[len(m.Output)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDistributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDistributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDistributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunDistributionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunDistributionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunDistributionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateUserClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateUserClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateUserClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserClaimType", wireType)
			}
			m.UserClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserClaimType |= DistributionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedRunner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedRunner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionType", wireType)
			}
			m.DistributionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributionType |= DistributionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
