// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params - used for initializing default parameter for clp at genesis
type Params struct {
	MinCreatePoolThreshold   uint64                                 `protobuf:"varint,1,opt,name=min_create_pool_threshold,json=minCreatePoolThreshold,proto3" json:"min_create_pool_threshold,omitempty"`
	PmtpPeriodGovernanceRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=pmtp_period_governance_rate,json=pmtpPeriodGovernanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_period_governance_rate"`
	PmtpPeriodEpochLength    int64                                  `protobuf:"varint,3,opt,name=pmtp_period_epoch_length,json=pmtpPeriodEpochLength,proto3" json:"pmtp_period_epoch_length,omitempty"`
	PmtpPeriodStartBlock     int64                                  `protobuf:"varint,4,opt,name=pmtp_period_start_block,json=pmtpPeriodStartBlock,proto3" json:"pmtp_period_start_block,omitempty"`
	PmtpPeriodEndBlock       int64                                  `protobuf:"varint,5,opt,name=pmtp_period_end_block,json=pmtpPeriodEndBlock,proto3" json:"pmtp_period_end_block,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinCreatePoolThreshold() uint64 {
	if m != nil {
		return m.MinCreatePoolThreshold
	}
	return 0
}

func (m *Params) GetPmtpPeriodEpochLength() int64 {
	if m != nil {
		return m.PmtpPeriodEpochLength
	}
	return 0
}

func (m *Params) GetPmtpPeriodStartBlock() int64 {
	if m != nil {
		return m.PmtpPeriodStartBlock
	}
	return 0
}

func (m *Params) GetPmtpPeriodEndBlock() int64 {
	if m != nil {
		return m.PmtpPeriodEndBlock
	}
	return 0
}

// These params are non-governable and are calculated on chain
type PmtpRateParams struct {
	PmtpPeriodBlockRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=pmtp_period_block_rate,json=pmtpPeriodBlockRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_period_block_rate"`
	PmtpCurrentRunningRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=pmtp_current_running_rate,json=pmtpCurrentRunningRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_current_running_rate"`
	PmtpInterPolicyRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=pmtp_inter_policy_rate,json=pmtpInterPolicyRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pmtp_inter_policy_rate"`
}

func (m *PmtpRateParams) Reset()         { *m = PmtpRateParams{} }
func (m *PmtpRateParams) String() string { return proto.CompactTextString(m) }
func (*PmtpRateParams) ProtoMessage()    {}
func (*PmtpRateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_61de66e331088d04, []int{1}
}
func (m *PmtpRateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PmtpRateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PmtpRateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PmtpRateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PmtpRateParams.Merge(m, src)
}
func (m *PmtpRateParams) XXX_Size() int {
	return m.Size()
}
func (m *PmtpRateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PmtpRateParams.DiscardUnknown(m)
}

var xxx_messageInfo_PmtpRateParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "sifnode.clp.v1.Params")
	proto.RegisterType((*PmtpRateParams)(nil), "sifnode.clp.v1.PmtpRateParams")
}

func init() { proto.RegisterFile("sifnode/clp/v1/params.proto", fileDescriptor_61de66e331088d04) }

var fileDescriptor_61de66e331088d04 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x37, 0xbb, 0x6b, 0xc1, 0x39, 0xf4, 0x10, 0xdb, 0x9a, 0x5a, 0x48, 0x97, 0x1e, 0x74,
	0x2f, 0x26, 0x2c, 0x22, 0xe2, 0xd1, 0xad, 0x22, 0x82, 0x87, 0x90, 0x7a, 0xf2, 0x32, 0x64, 0x27,
	0xd3, 0x64, 0x68, 0x66, 0xde, 0x30, 0x33, 0xbb, 0xd8, 0x6f, 0xe1, 0x97, 0x12, 0x7a, 0xec, 0x45,
	0x10, 0x0f, 0x45, 0x76, 0xbf, 0x88, 0xcc, 0x4b, 0xd6, 0x8d, 0xd7, 0xf6, 0x94, 0xc0, 0x3f, 0xff,
	0xdf, 0x6f, 0xe6, 0x91, 0x47, 0x4e, 0xac, 0xb8, 0x54, 0x50, 0xf2, 0x94, 0x35, 0x3a, 0x5d, 0xcd,
	0x52, 0x5d, 0x98, 0x42, 0xda, 0x44, 0x1b, 0x70, 0x10, 0xee, 0x77, 0x61, 0xc2, 0x1a, 0x9d, 0xac,
	0x66, 0xcf, 0x0e, 0x2a, 0xa8, 0x00, 0xa3, 0xd4, 0xbf, 0xb5, 0x5f, 0x9d, 0xfd, 0x1c, 0x92, 0xbd,
	0x0c, 0x6b, 0xe1, 0x5b, 0x72, 0x2c, 0x85, 0xa2, 0xcc, 0xf0, 0xc2, 0x71, 0xaa, 0x01, 0x1a, 0xea,
	0x6a, 0xc3, 0x6d, 0x0d, 0x4d, 0x19, 0x05, 0x93, 0x60, 0x3a, 0xce, 0x8f, 0xa4, 0x50, 0xe7, 0x98,
	0x67, 0x00, 0xcd, 0x97, 0x6d, 0x1a, 0x4a, 0x72, 0xa2, 0xa5, 0xd3, 0x54, 0x73, 0x23, 0xa0, 0xa4,
	0x15, 0xac, 0xb8, 0x51, 0x85, 0x62, 0x9c, 0x9a, 0xc2, 0xf1, 0x68, 0x38, 0x09, 0xa6, 0x8f, 0xe7,
	0xc9, 0xcd, 0xdd, 0xe9, 0xe0, 0xf7, 0xdd, 0xe9, 0xf3, 0x4a, 0xb8, 0x7a, 0xb9, 0x48, 0x18, 0xc8,
	0x94, 0x81, 0x95, 0x60, 0xbb, 0xc7, 0x4b, 0x5b, 0x5e, 0xa5, 0xee, 0x5a, 0x73, 0x9b, 0xbc, 0xe7,
	0x2c, 0x8f, 0x3c, 0x32, 0x43, 0xe2, 0xc7, 0x7f, 0xc0, 0xbc, 0x70, 0x3c, 0x7c, 0x43, 0xa2, 0xbe,
	0x8e, 0x6b, 0x60, 0x35, 0x6d, 0xb8, 0xaa, 0x5c, 0x1d, 0x8d, 0x26, 0xc1, 0x74, 0x94, 0x1f, 0xee,
	0xba, 0x1f, 0x7c, 0xfa, 0x19, 0xc3, 0xf0, 0x35, 0x79, 0xda, 0x2f, 0x5a, 0x57, 0x18, 0x47, 0x17,
	0x0d, 0xb0, 0xab, 0x68, 0x8c, 0xbd, 0x83, 0x5d, 0xef, 0xc2, 0x87, 0x73, 0x9f, 0x85, 0x33, 0x72,
	0xf8, 0x9f, 0x4f, 0x95, 0x5d, 0xe9, 0x11, 0x96, 0xc2, 0x9e, 0x4c, 0x95, 0x58, 0x39, 0xfb, 0x31,
	0x24, 0xfb, 0x99, 0x74, 0xda, 0x9f, 0xb7, 0x9b, 0x2f, 0x23, 0x47, 0x7d, 0x0a, 0x12, 0x1e, 0x32,
	0x9f, 0x27, 0x3b, 0x2d, 0x3a, 0x71, 0x34, 0x82, 0x1c, 0xa3, 0x84, 0x2d, 0x8d, 0xe1, 0xca, 0x51,
	0xb3, 0x54, 0x4a, 0xa8, 0xaa, 0xf5, 0x8c, 0xee, 0xe5, 0xc1, 0x53, 0x9f, 0xb7, 0xbc, 0xbc, 0xc5,
	0xa1, 0x6a, 0x7b, 0x1f, 0xa1, 0x1c, 0x37, 0x54, 0x43, 0x23, 0xd8, 0x75, 0xeb, 0x19, 0xdf, 0xff,
	0x3e, 0x9f, 0x3c, 0x2c, 0x43, 0x96, 0x97, 0xcc, 0xdf, 0xdd, 0xac, 0xe3, 0xe0, 0x76, 0x1d, 0x07,
	0x7f, 0xd6, 0x71, 0xf0, 0x7d, 0x13, 0x0f, 0x6e, 0x37, 0xf1, 0xe0, 0xd7, 0x26, 0x1e, 0x7c, 0x7d,
	0xd1, 0xc3, 0x5e, 0x88, 0x4b, 0x56, 0x17, 0x42, 0xa5, 0xdb, 0x85, 0xf8, 0x86, 0x2b, 0x81, 0xec,
	0xc5, 0x1e, 0xfe, 0xe9, 0xaf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x16, 0x09, 0x2f, 0xd8, 0x2e,
	0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PmtpPeriodEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodEndBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.PmtpPeriodStartBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodStartBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.PmtpPeriodEpochLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PmtpPeriodEpochLength))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.PmtpPeriodGovernanceRate.Size()
		i -= size
		if _, err := m.PmtpPeriodGovernanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MinCreatePoolThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinCreatePoolThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PmtpRateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PmtpRateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PmtpRateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PmtpInterPolicyRate.Size()
		i -= size
		if _, err := m.PmtpInterPolicyRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PmtpCurrentRunningRate.Size()
		i -= size
		if _, err := m.PmtpCurrentRunningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PmtpPeriodBlockRate.Size()
		i -= size
		if _, err := m.PmtpPeriodBlockRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinCreatePoolThreshold != 0 {
		n += 1 + sovParams(uint64(m.MinCreatePoolThreshold))
	}
	l = m.PmtpPeriodGovernanceRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.PmtpPeriodEpochLength != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodEpochLength))
	}
	if m.PmtpPeriodStartBlock != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodStartBlock))
	}
	if m.PmtpPeriodEndBlock != 0 {
		n += 1 + sovParams(uint64(m.PmtpPeriodEndBlock))
	}
	return n
}

func (m *PmtpRateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PmtpPeriodBlockRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PmtpCurrentRunningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PmtpInterPolicyRate.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCreatePoolThreshold", wireType)
			}
			m.MinCreatePoolThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCreatePoolThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodGovernanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpPeriodGovernanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEpochLength", wireType)
			}
			m.PmtpPeriodEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodStartBlock", wireType)
			}
			m.PmtpPeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodEndBlock", wireType)
			}
			m.PmtpPeriodEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PmtpPeriodEndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PmtpRateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PmtpRateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PmtpRateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpPeriodBlockRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpPeriodBlockRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpCurrentRunningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpCurrentRunningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmtpInterPolicyRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PmtpInterPolicyRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
