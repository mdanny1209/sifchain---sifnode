// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRemoveLiquidity struct {
	Signer        string                                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset *Asset                                 `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	WBasisPoints  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=w_basis_points,json=wBasisPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"w_basis_points" yaml:"w_basis_points"`
	Asymmetry     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=asymmetry,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"asymmetry" yaml:"asymmetry"`
}

func (m *MsgRemoveLiquidity) Reset()         { *m = MsgRemoveLiquidity{} }
func (m *MsgRemoveLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidity) ProtoMessage()    {}
func (*MsgRemoveLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{0}
}
func (m *MsgRemoveLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidity.Merge(m, src)
}
func (m *MsgRemoveLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidity proto.InternalMessageInfo

func (m *MsgRemoveLiquidity) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveLiquidity) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgRemoveLiquidityResponse struct {
}

func (m *MsgRemoveLiquidityResponse) Reset()         { *m = MsgRemoveLiquidityResponse{} }
func (m *MsgRemoveLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidityResponse) ProtoMessage()    {}
func (*MsgRemoveLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{1}
}
func (m *MsgRemoveLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidityResponse.Merge(m, src)
}
func (m *MsgRemoveLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidityResponse proto.InternalMessageInfo

type MsgCreatePool struct {
	Signer              string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset       *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	NativeAssetAmount   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=native_asset_amount,json=nativeAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_amount" yaml:"native_asset_amount"`
	ExternalAssetAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=external_asset_amount,json=externalAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_amount" yaml:"external_asset_amount"`
}

func (m *MsgCreatePool) Reset()         { *m = MsgCreatePool{} }
func (m *MsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePool) ProtoMessage()    {}
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{2}
}
func (m *MsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePool.Merge(m, src)
}
func (m *MsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePool proto.InternalMessageInfo

func (m *MsgCreatePool) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreatePool) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgCreatePoolResponse struct {
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{3}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

type MsgAddLiquidity struct {
	Signer              string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset       *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	NativeAssetAmount   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=native_asset_amount,json=nativeAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"native_asset_amount" yaml:"native_asset_amount"`
	ExternalAssetAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=external_asset_amount,json=externalAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"external_asset_amount" yaml:"external_asset_amount"`
}

func (m *MsgAddLiquidity) Reset()         { *m = MsgAddLiquidity{} }
func (m *MsgAddLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidity) ProtoMessage()    {}
func (*MsgAddLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{4}
}
func (m *MsgAddLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidity.Merge(m, src)
}
func (m *MsgAddLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidity proto.InternalMessageInfo

func (m *MsgAddLiquidity) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddLiquidity) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgAddLiquidityResponse struct {
}

func (m *MsgAddLiquidityResponse) Reset()         { *m = MsgAddLiquidityResponse{} }
func (m *MsgAddLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidityResponse) ProtoMessage()    {}
func (*MsgAddLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{5}
}
func (m *MsgAddLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidityResponse.Merge(m, src)
}
func (m *MsgAddLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidityResponse proto.InternalMessageInfo

type MsgSwap struct {
	Signer             string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	SentAsset          *Asset                                  `protobuf:"bytes,2,opt,name=sent_asset,json=sentAsset,proto3" json:"sent_asset,omitempty" yaml:"sent_asset"`
	ReceivedAsset      *Asset                                  `protobuf:"bytes,3,opt,name=received_asset,json=receivedAsset,proto3" json:"received_asset,omitempty" yaml:"received_asset"`
	SentAmount         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=sent_amount,json=sentAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"sent_amount" yaml:"sent_amount"`
	MinReceivingAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=min_receiving_amount,json=minReceivingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"min_receiving_amount" yaml:"min_receiving_amount"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{6}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

func (m *MsgSwap) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgSwap) GetSentAsset() *Asset {
	if m != nil {
		return m.SentAsset
	}
	return nil
}

func (m *MsgSwap) GetReceivedAsset() *Asset {
	if m != nil {
		return m.ReceivedAsset
	}
	return nil
}

type MsgSwapResponse struct {
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{7}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

type MsgDecommissionPool struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
}

func (m *MsgDecommissionPool) Reset()         { *m = MsgDecommissionPool{} }
func (m *MsgDecommissionPool) String() string { return proto.CompactTextString(m) }
func (*MsgDecommissionPool) ProtoMessage()    {}
func (*MsgDecommissionPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{8}
}
func (m *MsgDecommissionPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecommissionPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecommissionPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecommissionPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecommissionPool.Merge(m, src)
}
func (m *MsgDecommissionPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecommissionPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecommissionPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecommissionPool proto.InternalMessageInfo

func (m *MsgDecommissionPool) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDecommissionPool) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type MsgDecommissionPoolResponse struct {
}

func (m *MsgDecommissionPoolResponse) Reset()         { *m = MsgDecommissionPoolResponse{} }
func (m *MsgDecommissionPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDecommissionPoolResponse) ProtoMessage()    {}
func (*MsgDecommissionPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{9}
}
func (m *MsgDecommissionPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecommissionPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecommissionPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecommissionPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecommissionPoolResponse.Merge(m, src)
}
func (m *MsgDecommissionPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecommissionPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecommissionPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecommissionPoolResponse proto.InternalMessageInfo

type MsgUnlockLiquidityRequest struct {
	Signer        string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	ExternalAsset *Asset                                  `protobuf:"bytes,2,opt,name=external_asset,json=externalAsset,proto3" json:"external_asset,omitempty" yaml:"external_asset"`
	Units         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
}

func (m *MsgUnlockLiquidityRequest) Reset()         { *m = MsgUnlockLiquidityRequest{} }
func (m *MsgUnlockLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockLiquidityRequest) ProtoMessage()    {}
func (*MsgUnlockLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{10}
}
func (m *MsgUnlockLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockLiquidityRequest.Merge(m, src)
}
func (m *MsgUnlockLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockLiquidityRequest proto.InternalMessageInfo

func (m *MsgUnlockLiquidityRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUnlockLiquidityRequest) GetExternalAsset() *Asset {
	if m != nil {
		return m.ExternalAsset
	}
	return nil
}

type MsgUnlockLiquidityResponse struct {
}

func (m *MsgUnlockLiquidityResponse) Reset()         { *m = MsgUnlockLiquidityResponse{} }
func (m *MsgUnlockLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockLiquidityResponse) ProtoMessage()    {}
func (*MsgUnlockLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{11}
}
func (m *MsgUnlockLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockLiquidityResponse.Merge(m, src)
}
func (m *MsgUnlockLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockLiquidityResponse proto.InternalMessageInfo

type MsgUpdateRewardsParamsRequest struct {
	Signer                       string                                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	LiquidityRemovalLockPeriod   uint64                                  `protobuf:"varint,2,opt,name=liquidity_removal_lock_period,json=liquidityRemovalLockPeriod,proto3" json:"liquidity_removal_lock_period,omitempty"`
	LiquidityRemovalCancelPeriod uint64                                  `protobuf:"varint,3,opt,name=liquidity_removal_cancel_period,json=liquidityRemovalCancelPeriod,proto3" json:"liquidity_removal_cancel_period,omitempty"`
	DefaultMultiplier            *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=default_multiplier,json=defaultMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_multiplier,omitempty"`
}

func (m *MsgUpdateRewardsParamsRequest) Reset()         { *m = MsgUpdateRewardsParamsRequest{} }
func (m *MsgUpdateRewardsParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardsParamsRequest) ProtoMessage()    {}
func (*MsgUpdateRewardsParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{12}
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardsParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardsParamsRequest.Merge(m, src)
}
func (m *MsgUpdateRewardsParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardsParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardsParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardsParamsRequest proto.InternalMessageInfo

func (m *MsgUpdateRewardsParamsRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateRewardsParamsRequest) GetLiquidityRemovalLockPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalLockPeriod
	}
	return 0
}

func (m *MsgUpdateRewardsParamsRequest) GetLiquidityRemovalCancelPeriod() uint64 {
	if m != nil {
		return m.LiquidityRemovalCancelPeriod
	}
	return 0
}

type MsgUpdateRewardsParamsResponse struct {
}

func (m *MsgUpdateRewardsParamsResponse) Reset()         { *m = MsgUpdateRewardsParamsResponse{} }
func (m *MsgUpdateRewardsParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardsParamsResponse) ProtoMessage()    {}
func (*MsgUpdateRewardsParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{13}
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardsParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardsParamsResponse.Merge(m, src)
}
func (m *MsgUpdateRewardsParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardsParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardsParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardsParamsResponse proto.InternalMessageInfo

type MsgAddRewardPeriodRequest struct {
	Signer        string          `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" yaml:"signer"`
	RewardPeriods []*RewardPeriod `protobuf:"bytes,2,rep,name=reward_periods,json=rewardPeriods,proto3" json:"reward_periods,omitempty"`
}

func (m *MsgAddRewardPeriodRequest) Reset()         { *m = MsgAddRewardPeriodRequest{} }
func (m *MsgAddRewardPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPeriodRequest) ProtoMessage()    {}
func (*MsgAddRewardPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{14}
}
func (m *MsgAddRewardPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPeriodRequest.Merge(m, src)
}
func (m *MsgAddRewardPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPeriodRequest proto.InternalMessageInfo

func (m *MsgAddRewardPeriodRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddRewardPeriodRequest) GetRewardPeriods() []*RewardPeriod {
	if m != nil {
		return m.RewardPeriods
	}
	return nil
}

type MsgAddRewardPeriodResponse struct {
}

func (m *MsgAddRewardPeriodResponse) Reset()         { *m = MsgAddRewardPeriodResponse{} }
func (m *MsgAddRewardPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPeriodResponse) ProtoMessage()    {}
func (*MsgAddRewardPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bff5b30808c4f3, []int{15}
}
func (m *MsgAddRewardPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPeriodResponse.Merge(m, src)
}
func (m *MsgAddRewardPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPeriodResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRemoveLiquidity)(nil), "sifnode.clp.v1.MsgRemoveLiquidity")
	proto.RegisterType((*MsgRemoveLiquidityResponse)(nil), "sifnode.clp.v1.MsgRemoveLiquidityResponse")
	proto.RegisterType((*MsgCreatePool)(nil), "sifnode.clp.v1.MsgCreatePool")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "sifnode.clp.v1.MsgCreatePoolResponse")
	proto.RegisterType((*MsgAddLiquidity)(nil), "sifnode.clp.v1.MsgAddLiquidity")
	proto.RegisterType((*MsgAddLiquidityResponse)(nil), "sifnode.clp.v1.MsgAddLiquidityResponse")
	proto.RegisterType((*MsgSwap)(nil), "sifnode.clp.v1.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "sifnode.clp.v1.MsgSwapResponse")
	proto.RegisterType((*MsgDecommissionPool)(nil), "sifnode.clp.v1.MsgDecommissionPool")
	proto.RegisterType((*MsgDecommissionPoolResponse)(nil), "sifnode.clp.v1.MsgDecommissionPoolResponse")
	proto.RegisterType((*MsgUnlockLiquidityRequest)(nil), "sifnode.clp.v1.MsgUnlockLiquidityRequest")
	proto.RegisterType((*MsgUnlockLiquidityResponse)(nil), "sifnode.clp.v1.MsgUnlockLiquidityResponse")
	proto.RegisterType((*MsgUpdateRewardsParamsRequest)(nil), "sifnode.clp.v1.MsgUpdateRewardsParamsRequest")
	proto.RegisterType((*MsgUpdateRewardsParamsResponse)(nil), "sifnode.clp.v1.MsgUpdateRewardsParamsResponse")
	proto.RegisterType((*MsgAddRewardPeriodRequest)(nil), "sifnode.clp.v1.MsgAddRewardPeriodRequest")
	proto.RegisterType((*MsgAddRewardPeriodResponse)(nil), "sifnode.clp.v1.MsgAddRewardPeriodResponse")
}

func init() { proto.RegisterFile("sifnode/clp/v1/tx.proto", fileDescriptor_a3bff5b30808c4f3) }

var fileDescriptor_a3bff5b30808c4f3 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x41, 0x6f, 0xdb, 0xb6,
	0x17, 0x8f, 0xe3, 0x34, 0x7f, 0xe4, 0xa5, 0x4e, 0x6a, 0xa5, 0x46, 0x1c, 0x25, 0xb1, 0x03, 0xfd,
	0xb1, 0x35, 0xed, 0x50, 0x1b, 0xcd, 0x6e, 0x3b, 0xcd, 0x4e, 0x83, 0x61, 0x58, 0xbd, 0x05, 0x2a,
	0x8a, 0x6e, 0xbb, 0x78, 0x8a, 0xc4, 0x28, 0x44, 0x24, 0x52, 0x15, 0x69, 0x27, 0x3e, 0x0c, 0x18,
	0xb0, 0xcb, 0x80, 0x5d, 0x76, 0x1c, 0xf6, 0x25, 0xf6, 0x29, 0x06, 0xf4, 0xd8, 0xe3, 0xb0, 0x83,
	0x31, 0x24, 0xc0, 0x80, 0x5d, 0xf3, 0x09, 0x06, 0x91, 0x94, 0x6c, 0xc9, 0xf2, 0x6a, 0xf7, 0x94,
	0xc3, 0x4e, 0x36, 0xf9, 0xde, 0xfb, 0xfd, 0x1e, 0xdf, 0x8f, 0x7c, 0xa4, 0x60, 0x93, 0xe1, 0x53,
	0x42, 0x1d, 0xd4, 0xb4, 0xbd, 0xa0, 0xd9, 0x7f, 0xd2, 0xe4, 0x97, 0x8d, 0x20, 0xa4, 0x9c, 0x6a,
	0x6b, 0xca, 0xd0, 0xb0, 0xbd, 0xa0, 0xd1, 0x7f, 0xa2, 0xdf, 0x77, 0xa9, 0x4b, 0x85, 0xa9, 0x19,
	0xfd, 0x93, 0x5e, 0xba, 0x9e, 0x0d, 0x1f, 0x04, 0x88, 0x29, 0xdb, 0x76, 0xc6, 0x16, 0x58, 0xa1,
	0xe5, 0x2b, 0xa3, 0xf1, 0xf7, 0x22, 0x68, 0x1d, 0xe6, 0x9a, 0xc8, 0xa7, 0x7d, 0xf4, 0x0c, 0xbf,
	0xea, 0x61, 0x07, 0xf3, 0x81, 0xf6, 0x10, 0x96, 0x19, 0x76, 0x09, 0x0a, 0xab, 0x85, 0xbd, 0xc2,
	0xfe, 0x4a, 0xbb, 0x7c, 0x33, 0xac, 0x97, 0x06, 0x96, 0xef, 0x7d, 0x64, 0xc8, 0x79, 0xc3, 0x54,
	0x0e, 0xda, 0x4b, 0x58, 0x43, 0x97, 0x1c, 0x85, 0xc4, 0xf2, 0xba, 0x16, 0x63, 0x88, 0x57, 0x17,
	0xf7, 0x0a, 0xfb, 0xab, 0x07, 0x95, 0x46, 0x3a, 0xf3, 0x46, 0x2b, 0x32, 0xb6, 0xb7, 0x6e, 0x86,
	0xf5, 0x8a, 0x44, 0x4a, 0x87, 0x19, 0x66, 0x29, 0x9e, 0x10, 0x9e, 0x9a, 0x0f, 0x6b, 0x17, 0xdd,
	0x13, 0x8b, 0x61, 0xd6, 0x0d, 0x28, 0x26, 0x9c, 0x55, 0x8b, 0x22, 0x97, 0x4f, 0x5e, 0x0f, 0xeb,
	0x0b, 0x7f, 0x0c, 0xeb, 0xef, 0xbb, 0x98, 0x9f, 0xf5, 0x4e, 0x1a, 0x36, 0xf5, 0x9b, 0x36, 0x65,
	0x3e, 0x65, 0xea, 0xe7, 0x31, 0x73, 0xce, 0x55, 0x05, 0x3e, 0x25, 0x7c, 0xc4, 0x97, 0x46, 0x33,
	0xcc, 0xbb, 0x17, 0xed, 0x68, 0x7c, 0x2c, 0x86, 0xda, 0x37, 0xb0, 0x62, 0xb1, 0x81, 0xef, 0x23,
	0x1e, 0x0e, 0xaa, 0x4b, 0x82, 0xa9, 0x3d, 0x37, 0xd3, 0x3d, 0xc9, 0x94, 0x00, 0x19, 0xe6, 0x08,
	0xd4, 0xd8, 0x01, 0x7d, 0xb2, 0xd4, 0x26, 0x62, 0x01, 0x25, 0x0c, 0x19, 0x3f, 0x17, 0xa1, 0xd4,
	0x61, 0xee, 0x61, 0x88, 0x2c, 0x8e, 0x8e, 0x29, 0xf5, 0x6e, 0x85, 0x08, 0xdf, 0xc2, 0x06, 0xb1,
	0x38, 0xee, 0x23, 0x69, 0xef, 0x5a, 0x3e, 0xed, 0x11, 0xae, 0x94, 0xe8, 0xa8, 0xfa, 0x3c, 0x98,
	0xa1, 0x3e, 0x2f, 0xb0, 0x28, 0x90, 0x2e, 0x59, 0x73, 0x30, 0x0d, 0xb3, 0x2c, 0x67, 0x05, 0x71,
	0x4b, 0xcc, 0x69, 0xdf, 0x17, 0xa0, 0x92, 0xce, 0x30, 0xce, 0x40, 0x2a, 0xf4, 0xc5, 0xfc, 0x19,
	0xec, 0xe4, 0xad, 0x3b, 0xc9, 0x61, 0x23, 0xb5, 0x7c, 0x99, 0x85, 0xb1, 0x09, 0x95, 0x94, 0x32,
	0x89, 0x66, 0xbf, 0x14, 0x61, 0xbd, 0xc3, 0xdc, 0x96, 0xe3, 0xdc, 0xae, 0xa3, 0xf3, 0x9f, 0x6a,
	0x84, 0x1b, 0x5b, 0xb0, 0x99, 0xd1, 0x26, 0xd1, 0xed, 0xb7, 0x22, 0xfc, 0xaf, 0xc3, 0xdc, 0xe7,
	0x17, 0x56, 0x30, 0x8f, 0x5e, 0x9f, 0x01, 0x30, 0x44, 0xf8, 0x2c, 0x5a, 0x55, 0x6e, 0x86, 0xf5,
	0xb2, 0x42, 0x49, 0x42, 0x0c, 0x73, 0x25, 0x1a, 0x48, 0x8d, 0x5e, 0xc2, 0x5a, 0x88, 0x6c, 0x84,
	0xfb, 0xc8, 0x51, 0x80, 0xc5, 0x19, 0xc5, 0x4f, 0x87, 0x19, 0x66, 0x29, 0x9e, 0x90, 0xc0, 0xa7,
	0xb0, 0x2a, 0x29, 0xc7, 0x4b, 0x7e, 0x34, 0x7f, 0xc9, 0xb5, 0xf1, 0xf4, 0x55, 0xa1, 0xc5, 0xfa,
	0x95, 0xca, 0xdf, 0x15, 0xe0, 0xbe, 0x8f, 0x49, 0x57, 0xb2, 0x63, 0xe2, 0xc6, 0x8c, 0x77, 0x04,
	0xe3, 0xe7, 0xf3, 0x33, 0x6e, 0x4b, 0xc6, 0x3c, 0x50, 0xc3, 0xd4, 0x7c, 0x4c, 0xcc, 0x78, 0x56,
	0x49, 0x5c, 0x16, 0xc7, 0x2f, 0x92, 0x31, 0x91, 0xf6, 0x1c, 0x36, 0x3a, 0xcc, 0x7d, 0x8a, 0x6c,
	0xea, 0xfb, 0x98, 0x31, 0x4c, 0xc9, 0xbc, 0xbd, 0x34, 0x72, 0x1d, 0xf8, 0x27, 0xd4, 0x13, 0x0a,
	0xa7, 0x5d, 0xc5, 0x7c, 0xe4, 0x2a, 0xff, 0xec, 0xc2, 0x76, 0x0e, 0x59, 0x92, 0xcb, 0x5f, 0x05,
	0xd8, 0xea, 0x30, 0xf7, 0x05, 0xf1, 0xa8, 0x7d, 0x3e, 0xb6, 0x0b, 0x5f, 0xf5, 0x10, 0xe3, 0xb7,
	0xa2, 0x51, 0x1c, 0xc1, 0x9d, 0x1e, 0xc1, 0xc9, 0xd5, 0xda, 0x9c, 0x53, 0x33, 0x53, 0x46, 0xab,
	0x9b, 0x6d, 0x62, 0x9d, 0xaa, 0x0c, 0xbf, 0x2e, 0xc2, 0x6e, 0x64, 0x0e, 0x1c, 0x8b, 0x23, 0x13,
	0x5d, 0x58, 0xa1, 0xc3, 0x8e, 0xc5, 0x23, 0xe4, 0x1d, 0x4a, 0xd1, 0x82, 0x5d, 0x2f, 0x66, 0xe8,
	0x86, 0xd1, 0x5d, 0x6a, 0x79, 0xdd, 0x88, 0xb7, 0x1b, 0xa0, 0x10, 0x53, 0x47, 0x54, 0x66, 0xc9,
	0xd4, 0xbd, 0x51, 0x1a, 0xc2, 0xe7, 0x19, 0xb5, 0xcf, 0x8f, 0x85, 0x87, 0x76, 0x04, 0xf5, 0x49,
	0x08, 0xdb, 0x22, 0x36, 0xf2, 0x62, 0x90, 0xa2, 0x00, 0xd9, 0xc9, 0x82, 0x1c, 0x0a, 0x27, 0x05,
	0xf3, 0x15, 0x68, 0x0e, 0x3a, 0xb5, 0x7a, 0x1e, 0xef, 0xfa, 0x3d, 0x8f, 0xe3, 0xc0, 0xc3, 0x28,
	0x54, 0xc7, 0xed, 0xd1, 0x8c, 0xaf, 0x86, 0xa7, 0xc8, 0x36, 0xcb, 0x0a, 0xa5, 0x93, 0x80, 0x18,
	0x7b, 0x50, 0x9b, 0x56, 0x30, 0x55, 0xd3, 0x1f, 0xe5, 0xd6, 0x6a, 0x39, 0x8e, 0xb4, 0xcb, 0x9c,
	0xde, 0xa1, 0x9e, 0x87, 0x51, 0x1b, 0x8a, 0x10, 0xd4, 0xd2, 0x59, 0x75, 0x71, 0xaf, 0xb8, 0xbf,
	0x7a, 0xb0, 0x93, 0xdd, 0x5a, 0x29, 0x9e, 0x52, 0x38, 0x36, 0x8a, 0xf5, 0x9f, 0x48, 0x46, 0xe6,
	0x7a, 0xf0, 0xc3, 0x32, 0x14, 0x3b, 0xcc, 0xd5, 0x2c, 0x58, 0xcf, 0xbe, 0x33, 0x8d, 0x2c, 0xcb,
	0xe4, 0x03, 0x49, 0x7f, 0xf4, 0x76, 0x9f, 0x98, 0x4a, 0x33, 0x01, 0xc6, 0x1e, 0x50, 0xbb, 0x39,
	0x91, 0x23, 0xb3, 0xfe, 0xde, 0xbf, 0x9a, 0x13, 0xcc, 0x2f, 0xe1, 0x6e, 0xea, 0x82, 0xaf, 0xe7,
	0x84, 0x8d, 0x3b, 0xe8, 0x0f, 0xde, 0xe2, 0x90, 0x20, 0x7f, 0x0c, 0x4b, 0xe2, 0x0a, 0xda, 0xcc,
	0x09, 0x88, 0x0c, 0x7a, 0x7d, 0x8a, 0x21, 0x41, 0x70, 0xe0, 0xde, 0x44, 0xab, 0xfb, 0x7f, 0x4e,
	0x50, 0xd6, 0x49, 0xff, 0x60, 0x06, 0xa7, 0x84, 0xe5, 0x0c, 0xd6, 0x33, 0x67, 0x5b, 0x7b, 0x98,
	0x13, 0x9f, 0xdf, 0xe7, 0x72, 0xf5, 0x9b, 0xd2, 0x2a, 0x34, 0x0e, 0x1b, 0x39, 0xbb, 0x5e, 0x7b,
	0x9c, 0x07, 0x31, 0xb5, 0x9d, 0xe8, 0x8d, 0x59, 0xdd, 0x47, 0xeb, 0xcb, 0xec, 0xdd, 0xdc, 0xf5,
	0xe5, 0x1f, 0xb6, 0xdc, 0xf5, 0x4d, 0x39, 0x0a, 0xed, 0xd6, 0xeb, 0xab, 0x5a, 0xe1, 0xcd, 0x55,
	0xad, 0xf0, 0xe7, 0x55, 0xad, 0xf0, 0xd3, 0x75, 0x6d, 0xe1, 0xcd, 0x75, 0x6d, 0xe1, 0xf7, 0xeb,
	0xda, 0xc2, 0xd7, 0xe3, 0x2d, 0xf7, 0x39, 0x3e, 0xb5, 0xcf, 0x2c, 0x4c, 0x9a, 0xf1, 0x97, 0xdb,
	0xa5, 0xf8, 0x76, 0x13, 0x2d, 0xe3, 0x64, 0x59, 0x7c, 0xb8, 0x7d, 0xf8, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa1, 0x61, 0x24, 0x54, 0x32, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error)
	CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error)
	AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error)
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	DecommissionPool(ctx context.Context, in *MsgDecommissionPool, opts ...grpc.CallOption) (*MsgDecommissionPoolResponse, error)
	UnlockLiquidity(ctx context.Context, in *MsgUnlockLiquidityRequest, opts ...grpc.CallOption) (*MsgUnlockLiquidityResponse, error)
	UpdateRewardsParams(ctx context.Context, in *MsgUpdateRewardsParamsRequest, opts ...grpc.CallOption) (*MsgUpdateRewardsParamsResponse, error)
	AddRewardPeriod(ctx context.Context, in *MsgAddRewardPeriodRequest, opts ...grpc.CallOption) (*MsgAddRewardPeriodResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error) {
	out := new(MsgRemoveLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/RemoveLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error) {
	out := new(MsgCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error) {
	out := new(MsgAddLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/AddLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecommissionPool(ctx context.Context, in *MsgDecommissionPool, opts ...grpc.CallOption) (*MsgDecommissionPoolResponse, error) {
	out := new(MsgDecommissionPoolResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/DecommissionPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlockLiquidity(ctx context.Context, in *MsgUnlockLiquidityRequest, opts ...grpc.CallOption) (*MsgUnlockLiquidityResponse, error) {
	out := new(MsgUnlockLiquidityResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UnlockLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRewardsParams(ctx context.Context, in *MsgUpdateRewardsParamsRequest, opts ...grpc.CallOption) (*MsgUpdateRewardsParamsResponse, error) {
	out := new(MsgUpdateRewardsParamsResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/UpdateRewardsParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewardPeriod(ctx context.Context, in *MsgAddRewardPeriodRequest, opts ...grpc.CallOption) (*MsgAddRewardPeriodResponse, error) {
	out := new(MsgAddRewardPeriodResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Msg/AddRewardPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RemoveLiquidity(context.Context, *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error)
	CreatePool(context.Context, *MsgCreatePool) (*MsgCreatePoolResponse, error)
	AddLiquidity(context.Context, *MsgAddLiquidity) (*MsgAddLiquidityResponse, error)
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
	DecommissionPool(context.Context, *MsgDecommissionPool) (*MsgDecommissionPoolResponse, error)
	UnlockLiquidity(context.Context, *MsgUnlockLiquidityRequest) (*MsgUnlockLiquidityResponse, error)
	UpdateRewardsParams(context.Context, *MsgUpdateRewardsParamsRequest) (*MsgUpdateRewardsParamsResponse, error)
	AddRewardPeriod(context.Context, *MsgAddRewardPeriodRequest) (*MsgAddRewardPeriodResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RemoveLiquidity(ctx context.Context, req *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiquidity not implemented")
}
func (*UnimplementedMsgServer) CreatePool(ctx context.Context, req *MsgCreatePool) (*MsgCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedMsgServer) AddLiquidity(ctx context.Context, req *MsgAddLiquidity) (*MsgAddLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiquidity not implemented")
}
func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedMsgServer) DecommissionPool(ctx context.Context, req *MsgDecommissionPool) (*MsgDecommissionPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecommissionPool not implemented")
}
func (*UnimplementedMsgServer) UnlockLiquidity(ctx context.Context, req *MsgUnlockLiquidityRequest) (*MsgUnlockLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockLiquidity not implemented")
}
func (*UnimplementedMsgServer) UpdateRewardsParams(ctx context.Context, req *MsgUpdateRewardsParamsRequest) (*MsgUpdateRewardsParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRewardsParams not implemented")
}
func (*UnimplementedMsgServer) AddRewardPeriod(ctx context.Context, req *MsgAddRewardPeriodRequest) (*MsgAddRewardPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewardPeriod not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RemoveLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/RemoveLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveLiquidity(ctx, req.(*MsgRemoveLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePool(ctx, req.(*MsgCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/AddLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLiquidity(ctx, req.(*MsgAddLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecommissionPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecommissionPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecommissionPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/DecommissionPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecommissionPool(ctx, req.(*MsgDecommissionPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlockLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlockLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlockLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UnlockLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlockLiquidity(ctx, req.(*MsgUnlockLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRewardsParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRewardsParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRewardsParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/UpdateRewardsParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRewardsParams(ctx, req.(*MsgUpdateRewardsParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewardPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewardPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewardPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Msg/AddRewardPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewardPeriod(ctx, req.(*MsgAddRewardPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.clp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveLiquidity",
			Handler:    _Msg_RemoveLiquidity_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Msg_CreatePool_Handler,
		},
		{
			MethodName: "AddLiquidity",
			Handler:    _Msg_AddLiquidity_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
		{
			MethodName: "DecommissionPool",
			Handler:    _Msg_DecommissionPool_Handler,
		},
		{
			MethodName: "UnlockLiquidity",
			Handler:    _Msg_UnlockLiquidity_Handler,
		},
		{
			MethodName: "UpdateRewardsParams",
			Handler:    _Msg_UpdateRewardsParams_Handler,
		},
		{
			MethodName: "AddRewardPeriod",
			Handler:    _Msg_AddRewardPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/clp/v1/tx.proto",
}

func (m *MsgRemoveLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Asymmetry.Size()
		i -= size
		if _, err := m.Asymmetry.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WBasisPoints.Size()
		i -= size
		if _, err := m.WBasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalAssetAmount.Size()
		i -= size
		if _, err := m.ExternalAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NativeAssetAmount.Size()
		i -= size
		if _, err := m.NativeAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalAssetAmount.Size()
		i -= size
		if _, err := m.ExternalAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NativeAssetAmount.Size()
		i -= size
		if _, err := m.NativeAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinReceivingAmount.Size()
		i -= size
		if _, err := m.MinReceivingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SentAmount.Size()
		i -= size
		if _, err := m.SentAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ReceivedAsset != nil {
		{
			size, err := m.ReceivedAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SentAsset != nil {
		{
			size, err := m.SentAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDecommissionPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecommissionPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecommissionPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecommissionPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecommissionPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecommissionPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlockLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Units.Size()
		i -= size
		if _, err := m.Units.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ExternalAsset != nil {
		{
			size, err := m.ExternalAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlockLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardsParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardsParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardsParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultMultiplier != nil {
		{
			size := m.DefaultMultiplier.Size()
			i -= size
			if _, err := m.DefaultMultiplier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LiquidityRemovalCancelPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidityRemovalCancelPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidityRemovalLockPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidityRemovalLockPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardsParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardsParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardsParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPeriods) > 0 {
		for iNdEx := len(m.RewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRemoveLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.WBasisPoints.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Asymmetry.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NativeAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExternalAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NativeAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ExternalAssetAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SentAsset != nil {
		l = m.SentAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReceivedAsset != nil {
		l = m.ReceivedAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SentAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinReceivingAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDecommissionPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDecommissionPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlockLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExternalAsset != nil {
		l = m.ExternalAsset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Units.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnlockLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRewardsParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidityRemovalLockPeriod != 0 {
		n += 1 + sovTx(uint64(m.LiquidityRemovalLockPeriod))
	}
	if m.LiquidityRemovalCancelPeriod != 0 {
		n += 1 + sovTx(uint64(m.LiquidityRemovalCancelPeriod))
	}
	if m.DefaultMultiplier != nil {
		l = m.DefaultMultiplier.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRewardsParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewardPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RewardPeriods) > 0 {
		for _, e := range m.RewardPeriods {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddRewardPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRemoveLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WBasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asymmetry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asymmetry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAsset == nil {
				m.SentAsset = &Asset{}
			}
			if err := m.SentAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedAsset == nil {
				m.ReceivedAsset = &Asset{}
			}
			if err := m.ReceivedAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReceivingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinReceivingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecommissionPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecommissionPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecommissionPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecommissionPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecommissionPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecommissionPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalAsset == nil {
				m.ExternalAsset = &Asset{}
			}
			if err := m.ExternalAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Units.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardsParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalLockPeriod", wireType)
			}
			m.LiquidityRemovalLockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalLockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityRemovalCancelPeriod", wireType)
			}
			m.LiquidityRemovalCancelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityRemovalCancelPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.DefaultMultiplier = &v
			if err := m.DefaultMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardsParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardsParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPeriods = append(m.RewardPeriods, &RewardPeriod{})
			if err := m.RewardPeriods[len(m.RewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
