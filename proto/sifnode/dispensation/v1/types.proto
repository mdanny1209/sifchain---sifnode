syntax = "proto3";
package sifnode.dispensation.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/coin.proto";

option go_package = "github.com/Sifchain/sifnode/x/dispensation/types";

message GenesisState {
  DistributionRecords distribution_records = 1;
  Distributions distributions = 2;
}

// Distribution type enum
enum DistributionType {
  // Unspecified distribution type
  DISTRIBUTION_TYPE_UNSPECIFIED = 0;
  // Airdrop distribution type
  DISTRIBUTION_TYPE_AIRDROP = 1;
  // Validator Subsidy distribution type
  DISTRIBUTION_TYPE_VALIDATOR_SUBSIDY = 2;
  // Liquidity mining distribution type
  DISTRIBUTION_TYPE_LIQUIDITY_MINING = 3;
}

// Claim status enum
enum DistributionStatus {
  // Unspecified
  DISTRIBUTION_STATUS_UNSPECIFIED = 0;
  // Pending claim status
  DISTRIBUTION_STATUS_PENDING = 1;
  // Completed claim status
  DISTRIBUTION_STATUS_COMPLETED = 2;
}

message DistributionRecord {
  DistributionStatus distribution_status = 1;
  DistributionType distribution_type = 2;
  string distribution_name = 3;
  string recipient_address = 4;
  repeated cosmos.base.v1beta1.Coin coins = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"coins\""
  ];
  int64 distribution_start_height = 6;
  int64 distribution_completed_height = 7;
}

message DistributionRecords {
  repeated DistributionRecord distribution_records = 1;
}

message Distributions { repeated Distribution distributions = 1; }

message Distribution {
  DistributionType distribution_type = 1;
  string distribution_name = 2;
}

message UserClaim {
  string user_address = 1;
  DistributionType user_claim_type = 2;
  string user_claim_time = 3;
  bool locked = 4;
}

message UserClaims {
  repeated UserClaim user_claims = 1;
}