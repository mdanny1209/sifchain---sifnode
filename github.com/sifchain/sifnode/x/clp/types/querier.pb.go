// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/clp/v1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetPoolRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *GetPoolRequest) Reset()         { *m = GetPoolRequest{} }
func (m *GetPoolRequest) String() string { return proto.CompactTextString(m) }
func (*GetPoolRequest) ProtoMessage()    {}
func (*GetPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{0}
}
func (m *GetPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolRequest.Merge(m, src)
}
func (m *GetPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolRequest proto.InternalMessageInfo

type GetPoolResponse struct {
	Pool             *Pool  `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	ClpModuleAddress string `protobuf:"bytes,2,opt,name=clp_module_address,json=clpModuleAddress,proto3" json:"clp_module_address,omitempty"`
	Height           int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetPoolResponse) Reset()         { *m = GetPoolResponse{} }
func (m *GetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*GetPoolResponse) ProtoMessage()    {}
func (*GetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{1}
}
func (m *GetPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolResponse.Merge(m, src)
}
func (m *GetPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolResponse proto.InternalMessageInfo

func (m *GetPoolResponse) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *GetPoolResponse) GetClpModuleAddress() string {
	if m != nil {
		return m.ClpModuleAddress
	}
	return ""
}

func (m *GetPoolResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type LiquidityProviderRequest struct {
	Symbol    string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	LpAddress string `protobuf:"bytes,2,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
}

func (m *LiquidityProviderRequest) Reset()         { *m = LiquidityProviderRequest{} }
func (m *LiquidityProviderRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderRequest) ProtoMessage()    {}
func (*LiquidityProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{2}
}
func (m *LiquidityProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderRequest.Merge(m, src)
}
func (m *LiquidityProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderRequest proto.InternalMessageInfo

type LiquidityProviderResponse struct {
	LiquidityProvider    *LiquidityProvider `protobuf:"bytes,1,opt,name=liquidity_provider,json=liquidityProvider,proto3" json:"liquidity_provider,omitempty"`
	NativeAssetBalance   string             `protobuf:"bytes,2,opt,name=native_asset_balance,json=nativeAssetBalance,proto3" json:"native_asset_balance,omitempty"`
	ExternalAssetBalance string             `protobuf:"bytes,3,opt,name=external_asset_balance,json=externalAssetBalance,proto3" json:"external_asset_balance,omitempty"`
	Height               int64              `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LiquidityProviderResponse) Reset()         { *m = LiquidityProviderResponse{} }
func (m *LiquidityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderResponse) ProtoMessage()    {}
func (*LiquidityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{3}
}
func (m *LiquidityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderResponse.Merge(m, src)
}
func (m *LiquidityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderResponse proto.InternalMessageInfo

func (m *LiquidityProviderResponse) GetLiquidityProvider() *LiquidityProvider {
	if m != nil {
		return m.LiquidityProvider
	}
	return nil
}

func (m *LiquidityProviderResponse) GetNativeAssetBalance() string {
	if m != nil {
		return m.NativeAssetBalance
	}
	return ""
}

func (m *LiquidityProviderResponse) GetExternalAssetBalance() string {
	if m != nil {
		return m.ExternalAssetBalance
	}
	return ""
}

func (m *LiquidityProviderResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetAssetListRequest struct {
	LpAddress string `protobuf:"bytes,1,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
}

func (m *GetAssetListRequest) Reset()         { *m = GetAssetListRequest{} }
func (m *GetAssetListRequest) String() string { return proto.CompactTextString(m) }
func (*GetAssetListRequest) ProtoMessage()    {}
func (*GetAssetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{4}
}
func (m *GetAssetListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAssetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAssetListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAssetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssetListRequest.Merge(m, src)
}
func (m *GetAssetListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAssetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssetListRequest proto.InternalMessageInfo

type GetAssetListResponse struct {
}

func (m *GetAssetListResponse) Reset()         { *m = GetAssetListResponse{} }
func (m *GetAssetListResponse) String() string { return proto.CompactTextString(m) }
func (*GetAssetListResponse) ProtoMessage()    {}
func (*GetAssetListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{5}
}
func (m *GetAssetListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAssetListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAssetListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAssetListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAssetListResponse.Merge(m, src)
}
func (m *GetAssetListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAssetListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAssetListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAssetListResponse proto.InternalMessageInfo

type GetLiquidityProviderListRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (m *GetLiquidityProviderListRequest) Reset()         { *m = GetLiquidityProviderListRequest{} }
func (m *GetLiquidityProviderListRequest) String() string { return proto.CompactTextString(m) }
func (*GetLiquidityProviderListRequest) ProtoMessage()    {}
func (*GetLiquidityProviderListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{6}
}
func (m *GetLiquidityProviderListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiquidityProviderListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiquidityProviderListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiquidityProviderListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiquidityProviderListRequest.Merge(m, src)
}
func (m *GetLiquidityProviderListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLiquidityProviderListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiquidityProviderListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiquidityProviderListRequest proto.InternalMessageInfo

type GetLiquidityProviderListResponse struct {
}

func (m *GetLiquidityProviderListResponse) Reset()         { *m = GetLiquidityProviderListResponse{} }
func (m *GetLiquidityProviderListResponse) String() string { return proto.CompactTextString(m) }
func (*GetLiquidityProviderListResponse) ProtoMessage()    {}
func (*GetLiquidityProviderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f4edede314ca3fd, []int{7}
}
func (m *GetLiquidityProviderListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiquidityProviderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiquidityProviderListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiquidityProviderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiquidityProviderListResponse.Merge(m, src)
}
func (m *GetLiquidityProviderListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLiquidityProviderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiquidityProviderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiquidityProviderListResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetPoolRequest)(nil), "sifnode.clp.v1.GetPoolRequest")
	proto.RegisterType((*GetPoolResponse)(nil), "sifnode.clp.v1.GetPoolResponse")
	proto.RegisterType((*LiquidityProviderRequest)(nil), "sifnode.clp.v1.LiquidityProviderRequest")
	proto.RegisterType((*LiquidityProviderResponse)(nil), "sifnode.clp.v1.LiquidityProviderResponse")
	proto.RegisterType((*GetAssetListRequest)(nil), "sifnode.clp.v1.GetAssetListRequest")
	proto.RegisterType((*GetAssetListResponse)(nil), "sifnode.clp.v1.GetAssetListResponse")
	proto.RegisterType((*GetLiquidityProviderListRequest)(nil), "sifnode.clp.v1.GetLiquidityProviderListRequest")
	proto.RegisterType((*GetLiquidityProviderListResponse)(nil), "sifnode.clp.v1.GetLiquidityProviderListResponse")
}

func init() { proto.RegisterFile("sifnode/clp/v1/querier.proto", fileDescriptor_5f4edede314ca3fd) }

var fileDescriptor_5f4edede314ca3fd = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x49, 0x29, 0xf4, 0x81, 0x0a, 0x3d, 0xa2, 0x28, 0x58, 0xe0, 0x84, 0x80, 0x44, 0x90,
	0x90, 0xdd, 0x06, 0x26, 0x06, 0xa4, 0x94, 0x21, 0x12, 0x2a, 0x52, 0x08, 0x13, 0x30, 0x58, 0x8e,
	0x7d, 0x8d, 0x4f, 0xba, 0xf8, 0x2e, 0xbe, 0x73, 0xd4, 0x0c, 0x0c, 0x6c, 0x8c, 0x6c, 0xac, 0xfd,
	0x39, 0x8c, 0x1d, 0x19, 0x51, 0xb2, 0xb0, 0xf0, 0x1f, 0x50, 0xce, 0x17, 0xb0, 0xdd, 0xb8, 0x74,
	0xf3, 0xdd, 0xf7, 0xde, 0xf7, 0xdd, 0xf7, 0x3d, 0xeb, 0xc1, 0x3d, 0x41, 0x8e, 0x23, 0x16, 0x60,
	0xc7, 0xa7, 0xdc, 0x99, 0x1d, 0x38, 0xd3, 0x04, 0xc7, 0x04, 0xc7, 0x36, 0x8f, 0x99, 0x64, 0x68,
	0x57, 0xa3, 0xb6, 0x4f, 0xb9, 0x3d, 0x3b, 0x30, 0x6b, 0x63, 0x36, 0x66, 0x0a, 0x72, 0x56, 0x5f,
	0x69, 0x95, 0x69, 0x16, 0x38, 0xe4, 0x9c, 0x63, 0x91, 0x62, 0xed, 0x2e, 0xec, 0xf6, 0xb1, 0x1c,
	0x30, 0x46, 0x87, 0x78, 0x9a, 0x60, 0x21, 0x51, 0x1d, 0xb6, 0xc5, 0x7c, 0x32, 0x62, 0xb4, 0x61,
	0xb4, 0x8c, 0xce, 0xce, 0x50, 0x9f, 0x5e, 0x5c, 0xff, 0x72, 0xda, 0xac, 0xfc, 0x3a, 0x6d, 0x56,
	0xda, 0x9f, 0x0d, 0xb8, 0xf5, 0xb7, 0x49, 0x70, 0x16, 0x09, 0x8c, 0x3a, 0xb0, 0xc5, 0x99, 0xee,
	0xb9, 0xd1, 0xad, 0xd9, 0xf9, 0x87, 0xd9, 0xaa, 0x56, 0x55, 0xa0, 0xa7, 0x80, 0x7c, 0xca, 0xdd,
	0x09, 0x0b, 0x12, 0x8a, 0x5d, 0x2f, 0x08, 0x62, 0x2c, 0x44, 0xe3, 0x8a, 0xd2, 0xba, 0xed, 0x53,
	0xfe, 0x46, 0x01, 0xbd, 0xf4, 0x7e, 0xf5, 0x9a, 0x10, 0x93, 0x71, 0x28, 0x1b, 0xd5, 0x96, 0xd1,
	0xa9, 0x0e, 0xf5, 0xa9, 0xfd, 0x11, 0x1a, 0x47, 0x64, 0x9a, 0x90, 0x80, 0xc8, 0xf9, 0x20, 0x66,
	0x33, 0x12, 0xe0, 0x38, 0xe3, 0xe0, 0x5d, 0xce, 0x41, 0x7a, 0x42, 0xf7, 0x01, 0x28, 0x2f, 0x28,
	0xee, 0x50, 0xae, 0xa5, 0x32, 0x06, 0x7f, 0x1b, 0x70, 0x77, 0x03, 0xbb, 0xb6, 0x3a, 0x00, 0x44,
	0xd7, 0xa0, 0xcb, 0x35, 0xaa, 0x8d, 0x3f, 0x28, 0x1a, 0x3f, 0x4f, 0xb3, 0x47, 0x8b, 0x57, 0x68,
	0x1f, 0x6a, 0x91, 0x27, 0xc9, 0x0c, 0xbb, 0x9e, 0x10, 0x58, 0xba, 0x23, 0x8f, 0x7a, 0x91, 0x8f,
	0xf5, 0x13, 0x51, 0x8a, 0xf5, 0x56, 0xd0, 0x61, 0x8a, 0xa0, 0xe7, 0x50, 0xc7, 0x27, 0x12, 0xc7,
	0x91, 0x47, 0x0b, 0x3d, 0x55, 0xd5, 0x53, 0x5b, 0xa3, 0xb9, 0xae, 0x7f, 0x61, 0x6e, 0xe5, 0xc2,
	0x7c, 0x09, 0x77, 0xfa, 0x58, 0xaa, 0xd2, 0x23, 0x22, 0xe4, 0x3a, 0xc7, 0x7c, 0x5e, 0x46, 0x79,
	0x5e, 0x75, 0xa8, 0xe5, 0xfb, 0xd3, 0xa4, 0xda, 0xaf, 0xa0, 0xd9, 0x5f, 0x5d, 0x15, 0xfc, 0x66,
	0x35, 0x4a, 0x66, 0x95, 0x21, 0x6f, 0x43, 0xab, 0x9c, 0x24, 0x15, 0xea, 0x7e, 0xab, 0xc2, 0xd5,
	0xb7, 0x09, 0x8e, 0xe7, 0xe8, 0x35, 0x5c, 0xd3, 0xbf, 0x26, 0xb2, 0x8a, 0xb3, 0xc8, 0xff, 0xe8,
	0x66, 0xb3, 0x14, 0xd7, 0x83, 0x0e, 0x61, 0xef, 0x9c, 0x2c, 0xea, 0xfc, 0x7f, 0xc2, 0x9a, 0xff,
	0xc9, 0x25, 0x2a, 0xb5, 0xd2, 0x7b, 0xb8, 0x99, 0x0d, 0x10, 0x3d, 0xdc, 0xf0, 0xb4, 0xe2, 0x78,
	0xcc, 0x47, 0x17, 0x17, 0x69, 0xea, 0x4f, 0xd0, 0x28, 0x8b, 0x0f, 0x39, 0x1b, 0x18, 0x2e, 0x9a,
	0x96, 0xb9, 0x7f, 0xf9, 0x86, 0x54, 0xfe, 0xb0, 0xf7, 0x7d, 0x61, 0x19, 0x67, 0x0b, 0xcb, 0xf8,
	0xb9, 0xb0, 0x8c, 0xaf, 0x4b, 0xab, 0x72, 0xb6, 0xb4, 0x2a, 0x3f, 0x96, 0x56, 0xe5, 0xc3, 0xe3,
	0x31, 0x91, 0x61, 0x32, 0xb2, 0x7d, 0x36, 0x71, 0x04, 0x39, 0xf6, 0x43, 0x8f, 0x44, 0xce, 0x7a,
	0x53, 0x9d, 0xa8, 0x5d, 0xa5, 0x16, 0xd5, 0x68, 0x5b, 0x6d, 0xaa, 0x67, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xcd, 0x1b, 0x20, 0xd5, 0x0b, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
	LiquidityProvider(ctx context.Context, in *LiquidityProviderRequest, opts ...grpc.CallOption) (*LiquidityProviderResponse, error)
	GetAssetList(ctx context.Context, in *GetAssetListRequest, opts ...grpc.CallOption) (*GetAssetListResponse, error)
	GetLiquidityProviderList(ctx context.Context, in *GetLiquidityProviderListRequest, opts ...grpc.CallOption) (*GetLiquidityProviderListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProvider(ctx context.Context, in *LiquidityProviderRequest, opts ...grpc.CallOption) (*LiquidityProviderResponse, error) {
	out := new(LiquidityProviderResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/LiquidityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAssetList(ctx context.Context, in *GetAssetListRequest, opts ...grpc.CallOption) (*GetAssetListResponse, error) {
	out := new(GetAssetListResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidityProviderList(ctx context.Context, in *GetLiquidityProviderListRequest, opts ...grpc.CallOption) (*GetLiquidityProviderListResponse, error) {
	out := new(GetLiquidityProviderListResponse)
	err := c.cc.Invoke(ctx, "/sifnode.clp.v1.Query/GetLiquidityProviderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	LiquidityProvider(context.Context, *LiquidityProviderRequest) (*LiquidityProviderResponse, error)
	GetAssetList(context.Context, *GetAssetListRequest) (*GetAssetListResponse, error)
	GetLiquidityProviderList(context.Context, *GetLiquidityProviderListRequest) (*GetLiquidityProviderListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetPool(ctx context.Context, req *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (*UnimplementedQueryServer) LiquidityProvider(ctx context.Context, req *LiquidityProviderRequest) (*LiquidityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvider not implemented")
}
func (*UnimplementedQueryServer) GetAssetList(ctx context.Context, req *GetAssetListRequest) (*GetAssetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetList not implemented")
}
func (*UnimplementedQueryServer) GetLiquidityProviderList(ctx context.Context, req *GetLiquidityProviderListRequest) (*GetLiquidityProviderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityProviderList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/LiquidityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProvider(ctx, req.(*LiquidityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAssetList(ctx, req.(*GetAssetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidityProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidityProviderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidityProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.clp.v1.Query/GetLiquidityProviderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidityProviderList(ctx, req.(*GetLiquidityProviderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.clp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPool",
			Handler:    _Query_GetPool_Handler,
		},
		{
			MethodName: "LiquidityProvider",
			Handler:    _Query_LiquidityProvider_Handler,
		},
		{
			MethodName: "GetAssetList",
			Handler:    _Query_GetAssetList_Handler,
		},
		{
			MethodName: "GetLiquidityProviderList",
			Handler:    _Query_GetLiquidityProviderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/clp/v1/querier.proto",
}

func (m *GetPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClpModuleAddress) > 0 {
		i -= len(m.ClpModuleAddress)
		copy(dAtA[i:], m.ClpModuleAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ClpModuleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExternalAssetBalance) > 0 {
		i -= len(m.ExternalAssetBalance)
		copy(dAtA[i:], m.ExternalAssetBalance)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.ExternalAssetBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NativeAssetBalance) > 0 {
		i -= len(m.NativeAssetBalance)
		copy(dAtA[i:], m.NativeAssetBalance)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.NativeAssetBalance)))
		i--
		dAtA[i] = 0x12
	}
	if m.LiquidityProvider != nil {
		{
			size, err := m.LiquidityProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAssetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAssetListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAssetListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAssetListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAssetListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAssetListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetLiquidityProviderListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiquidityProviderListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiquidityProviderListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiquidityProviderListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiquidityProviderListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiquidityProviderListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *GetPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.ClpModuleAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *LiquidityProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *LiquidityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidityProvider != nil {
		l = m.LiquidityProvider.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.NativeAssetBalance)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.ExternalAssetBalance)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuerier(uint64(m.Height))
	}
	return n
}

func (m *GetAssetListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *GetAssetListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetLiquidityProviderListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *GetLiquidityProviderListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClpModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClpModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidityProvider == nil {
				m.LiquidityProvider = &LiquidityProvider{}
			}
			if err := m.LiquidityProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAssetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAssetBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAssetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAssetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAssetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAssetListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAssetListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAssetListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiquidityProviderListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiquidityProviderListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiquidityProviderListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiquidityProviderListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiquidityProviderListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiquidityProviderListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
