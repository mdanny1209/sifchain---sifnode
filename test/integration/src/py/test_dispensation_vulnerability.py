import logging
import os
import time
import json
import pytest

import burn_lock_functions
from burn_lock_functions import EthereumToSifchainTransferRequest
import test_utilities
from pytest_utilities import generate_test_account
from test_utilities import get_required_env_var, SifchaincliCredentials, get_optional_env_var, ganache_owner_account, \
    get_shell_output_json, get_shell_output, detect_errors_in_sifnodecli_output, get_transaction_result, amount_in_wei

#CODE TO CHECK ACCOUNT BALANCE
def balance_check(address,currency):
    logging.debug(f"check_balance")
    cmd = " ".join([
        "sifnodecli query account",
        f"{address}",
      
    ])
    json_str = get_shell_output_json(cmd)
    amountbalance = json_str['value']['coins']
    for i in amountbalance:
        if i['denom'] == currency:
            balance = i['amount']
    return (balance)

#CODE TO SIGN TXN 
def sign_txn(address,jsonfileobject,keyring_backend):
    logging.debug(f"sign_txn")
    keyring_backend_entry = f"--keyring-backend {keyring_backend}" 
    cmd = " ".join([
        "sifnodecli tx sign",
        f"--from {address}",
        f"{jsonfileobject}",
        keyring_backend_entry,
        f"--yes", 
      
    ])
    json_str = get_shell_output_json(cmd)
    return (json_str)

#CODE TO BROADCAST TXN ON THE CHAIN
def broadcast_signed_txn(signedjsonfileobject,keyring_backend):
    logging.debug(f"sign_txn")
    keyring_backend_entry = f"--keyring-backend {keyring_backend}" 
    cmd = " ".join([
        "sifnodecli tx broadcast",
        f"{signedjsonfileobject}",
        keyring_backend_entry,
        f"--yes", 
      
    ])
    json_str = get_shell_output_json(cmd)
    txn = json_str["txhash"]
    return (txn)

#CODE TO QUERY TXN ON THE BLOCK
def query_block_claim(txnhash):
    cmd = " ".join([
        "sifnodecli q tx",
        f"{txnhash}",
    ])
    json_str = get_shell_output_json(cmd)
    return json_str

#TEST CODE TO CHECK IF AN EXCEPTION IS RAISED IF ONLY RECIPIENT ADDRESS IS USED FOR SIGNING THE TXN
def test_signed_txn_with_recipient_address():
    keyring_backend = 'test'
    with open('hackerfile.json') as f:
        data = json.load(f)
    txn_sign_address = str(data['value']['msg'][0]['value']['Signer'])
    sender_address =   str(data['value']['msg'][0]['value']['Input'][0]['address'])
    recipient_address = str(data['value']['msg'][0]['value']['Output'][0]['address'])
    assert txn_sign_address == recipient_address
    with pytest.raises(Exception):
        sigresponse = sign_txn(txn_sign_address, 'hackerfile.json',keyring_backend)

#TEST CODE TO VALIDATE POSITIVE FLOW WHETHER DISPENSATION IS CREATED IF SIGNING ADDRESS IS SENDER ADDRESS
def test_signed_txn_with_sender_address():
    keyring_backend = 'test'
    currency = 'rowan'
    with open('hackerfile.json') as f:
        data = json.load(f)
    txn_sign_address = str(data['value']['msg'][0]['value']['Signer'])
    sender_address =   str(data['value']['msg'][0]['value']['Input'][0]['address'])
    recipient_address = str(data['value']['msg'][0]['value']['Output'][0]['address'])
    transferred_balance = int(data['value']['msg'][0]['value']['Output'][0]['coins'][0]['amount'])
    txn_sign_address = sender_address
    
    amountbalance = int(balance_check(sender_address,currency))
    logging.info(f"sender address = {sender_address}")
    logging.info(f"recipient address = {recipient_address}")
    assert txn_sign_address == sender_address
    recipient_initial_balance = int(balance_check(recipient_address,currency))
    sender_initial_balance = int(balance_check(sender_address,currency))
    
    sigresponse = sign_txn(txn_sign_address, 'hackerfile.json',keyring_backend)
    recipient_new_balance = recipient_initial_balance + transferred_balance 
    sender_new_balance = sender_initial_balance - transferred_balance 
    logging.info(f"sender new balance = {sender_new_balance}")
    logging.info(f"recipient new balance = {recipient_new_balance}")
    assert int(recipient_new_balance) == int(recipient_initial_balance + transferred_balance)
    assert int(sender_new_balance) == int(sender_initial_balance - transferred_balance)
    with open("sig.json", "w") as sigfile:
        json.dump(sigresponse, sigfile)
    txnhash = (broadcast_signed_txn('sig.json',keyring_backend))
    time.sleep(5)
    blockresponse = (query_block_claim(str(txnhash)))

    '''IF A DUPLICATE DISPENSATION WITH SAME NAME IS TRIED, BELOW LINE OF CODE THROWS KeyError:'logs', 
    CHANGE THE DISTRIBUTION NAME IN hackerfile.json TO AVOID THIS ISSUE, NOT HANDLING IT IN CODE 
    TO AVOID PASSING IT WHEN DISPENSATION IS NOT CREATED SUCCESSFULLY'''

    distype = str(blockresponse['logs'][0]['events'][0]['type'])
    assert distype == 'distribution_started'
    try:
        os.remove('sig.json')
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))
          

